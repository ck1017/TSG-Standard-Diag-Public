-- Modem Diagnostic Monitoring Interface API
-- Draft v2.5
-- 4.8.2016

--  LastUpdated
--      201604080000Z
--  OrgName
--      Verizon Wireless
--  Descr
--      MIB module for generic diagnostic applications

MDMI DEFINITIONS ::= BEGIN

IMPORTS
    OBJECT-TYPE
        FROM RFC-1212;

mdmiDebug           OBJECT IDENTIFIER ::= { mdmi(1) 1 }
mdmiLte             OBJECT IDENTIFIER ::= { mdmi(1) 2 }
mdmiGsm             OBJECT IDENTIFIER ::= { mdmi(1) 3 }
mdmiUmts            OBJECT IDENTIFIER ::= { mdmi(1) 4 }
mdmiWifi            OBJECT IDENTIFIER ::= { mdmi(1) 5 }
mdmiIms             OBJECT IDENTIFIER ::= { mdmi(1) 6 }
mdmiCommands        OBJECT IDENTIFIER ::= { mdmi(1) 7 }
mdmiLteMiddleware   OBJECT IDENTIFIER ::= { mdmi(1) 8 }

-------------------------------------------------------------------------------
------      mdmiDebug                                              ------------
-------------------------------------------------------------------------------
debugConfig         OBJECT IDENTIFIER ::= { mdmiDebug 1 }
debugKpis           OBJECT IDENTIFIER ::= { mdmiDebug 2 }
debugEvents         OBJECT IDENTIFIER ::= { mdmiDebug 3 }
debugReserved       OBJECT IDENTIFIER ::= { mdmiDebug 4 }

-------------------------------------------------------------------------------
------      mdmiLte                                                ------------
-------------------------------------------------------------------------------
lteDebug    OBJECT IDENTIFIER ::= { mdmiLte 1 }
lteRrc      OBJECT IDENTIFIER ::= { mdmiLte 2 }
lteNas      OBJECT IDENTIFIER ::= { mdmiLte 3 }
lteMac      OBJECT IDENTIFIER ::= { mdmiLte 4 }
lteRlc      OBJECT IDENTIFIER ::= { mdmiLte 5 }
ltePdcp     OBJECT IDENTIFIER ::= { mdmiLte 6 }
ltePhy      OBJECT IDENTIFIER ::= { mdmiLte 7 }
lteIp       OBJECT IDENTIFIER ::= { mdmiLte 8 }

lteRrcDebug         OBJECT IDENTIFIER ::= { lteRrc 1 }
lteRrcKpis          OBJECT IDENTIFIER ::= { lteRrc 2 }
lteRrcEvents        OBJECT IDENTIFIER ::= { lteRrc 3 }
lteRrcMessages      OBJECT IDENTIFIER ::= { lteRrc 4 }

lteNasDebug         OBJECT IDENTIFIER ::= { lteNas 1 }
lteNasKpis          OBJECT IDENTIFIER ::= { lteNas 2 }
lteNasEvents        OBJECT IDENTIFIER ::= { lteNas 3 }
lteNasMessages      OBJECT IDENTIFIER ::= { lteNas 4 }

lteMacDebug         OBJECT IDENTIFIER ::= { lteMac 1 }
lteMacKpis          OBJECT IDENTIFIER ::= { lteMac 2 }
lteMacEvents        OBJECT IDENTIFIER ::= { lteMac 3 }
lteMacMessages      OBJECT IDENTIFIER ::= { lteMac 4 }

lteRlcDebug         OBJECT IDENTIFIER ::= { lteRlc 1 }
lteRlcKpis          OBJECT IDENTIFIER ::= { lteRlc 2 }
lteRlcEvents        OBJECT IDENTIFIER ::= { lteRlc 3 }
lteRlcMessages      OBJECT IDENTIFIER ::= { lteRlc 4 }

ltePdcpDebug         OBJECT IDENTIFIER ::= { ltePdcp 1 }
ltePdcpKpis          OBJECT IDENTIFIER ::= { ltePdcp 2 }
ltePdcpEvents        OBJECT IDENTIFIER ::= { ltePdcp 3 }
ltePdcpMessages      OBJECT IDENTIFIER ::= { ltePdcp 4 }

ltePhyDebug             OBJECT IDENTIFIER ::= { ltePhy 1 }
ltePhyMeasurements      OBJECT IDENTIFIER ::= { ltePhy 2 }
ltePhyEvents            OBJECT IDENTIFIER ::= { ltePhy 3 }
ltePhyPmch              OBJECT IDENTIFIER ::= { ltePhy 4 }
ltePhyPbch              OBJECT IDENTIFIER ::= { ltePhy 5 }
ltePhyPdsch             OBJECT IDENTIFIER ::= { ltePhy 6 }
ltePhyPcfich            OBJECT IDENTIFIER ::= { ltePhy 7 }
ltePhyPdcch             OBJECT IDENTIFIER ::= { ltePhy 8 }
ltePhyPhich             OBJECT IDENTIFIER ::= { ltePhy 9 }
ltePhyPucch             OBJECT IDENTIFIER ::= { ltePhy 10 }
ltePhyPusch             OBJECT IDENTIFIER ::= { ltePhy 11 }
ltePhyPrach             OBJECT IDENTIFIER ::= { ltePhy 12 }
ltePhyEpdcch            OBJECT IDENTIFIER ::= { ltePhy 13 }

lteIpDebug         OBJECT IDENTIFIER ::= { lteIp 1 }
lteIpKpis          OBJECT IDENTIFIER ::= { lteIp 2 }
lteIpEvents        OBJECT IDENTIFIER ::= { lteIp 3 }
lteIpMessages      OBJECT IDENTIFIER ::= { lteIp 4 }

    -------------------------------------------------------------------------------
    ------      Common Fields                                          ------------
    -------------------------------------------------------------------------------

Version3gpp ::= SEQUENCE { 
    majorVersion    INTEGER,
    minorVersion    INTEGER,
    releaseVersion  INTEGER
}

OtaMessageDirection ::= INTEGER {
    upstream (1),
    downstream (2)
}

SystemFrameNumber ::= INTEGER (0..1023)

SubFrameNumber ::= INTEGER (0..9)

ThroughputObject ::= SEQUENCE {
    timeStamp       TimeStamp,
    throughput      INTEGER             --in kbps
}

-- time stamp (Universal Time Coordinated, UTC) corresponding to throughput measurement
TimeStamp ::= SEQUENCE {
    year    INTEGER,
    month   INTEGER,
    day INTEGER,
    hour    INTEGER,
    minute  INTEGER,
    second  INTEGER,
    millisecond INTEGER
}
-- geographical coordinates of the point corresponding to throughput measurements
LocationResult ::= CHOICE {
    valid-location  Location,
    location-null   NULL
}
Location ::= SEQUENCE {
        -- all values are double (IETF 754)
    latitude    OCTET STRING(SIZE (8)),
    longitude   OCTET STRING(SIZE (8)),
    altitude    OCTET STRING(SIZE (8))
}

RatInfo ::= INTEGER {
    noService (0),
    gsm (1),
    umts (2),
    lte (3),
    cdma (4),
    wifi (5)
}

CellularRatInfo ::= INTEGER {
    gsm (1),
    umts (2),
    lte (3),
    cdma (4)
}

MCC-MNC ::= SEQUENCE {
    mcc MCC,
    mnc MNC
}
MCC ::= SEQUENCE (SIZE (3)) OF MCC-MNC-Digit
MNC ::= SEQUENCE (SIZE (2..3)) OF MCC-MNC-Digit
MCC-MNC-Digit ::= INTEGER (0..9)

CallStatus ::= INTEGER {
    inactive (0),
    active (1)
}

CallType ::= INTEGER {
    emergency (0),
    voice (1),
    video (2)
}

MCS ::= INTEGER (0..31)

PowerControlAccumalationFactor ::= INTEGER (-141..141)

Earfcn ::= INTEGER (0..262143)

BandIndicator ::= INTEGER (1..64)

PLMN ::= SEQUENCE {
        mccMnc0 MCC-MNC,
        mccMnc1 MCC-MNC,
        mccMnc2 MCC-MNC
}

DciFormat ::= INTEGER {
        format0 (0),
        format1 (1),
        format1A (2),
        format1B (3),
        format1C (4),
        format1D (5),
        format2 (6),
        format2A (7),
        format3 (8),
        format3A (9)
}

PowerValue ::= INTEGER (-112..23)    -- Power measurement in dB

CarrierIndex ::= INTEGER {
    PCC (0),
    SCC1 (1),
    SCC2 (2)
}

CarrierType ::= INTEGER {
    PCC (0),
    SCC (1)
}

DuplexType ::= INTEGER {
    FDD (0),
    TDD (1)
}

ServingCellIndex ::= INTEGER {
    PCell (0),
    SCell1 (1),
    SCell2 (2),
    SCell3 (3),
    SCell4 (4),
    SCell5 (5),
    SCell6 (6),
    SCell7 (7)
}

LteWifiHandover ::= CHOICE {
    handoverAttempt     NULL,
    handoverResult      LteWifiHOResult
}

LteWifiHOResult ::= SEQUENCE {
    epdgIpAddress       OCTET STRING,
    result              CHOICE {
        success         LteWifiHOSuccess,
        failure         LteWifiHOFailure
    }
}

LteWifiHOSuccess ::= SEQUENCE {
    accessPointName     OCTET STRING,
    mode                WifiScanType,
    dpdInterval         INTEGER       -- Dead peer detection interval, in seconds
}

LteWifiHOFailure ::= CHOICE {
    ipsecTimeoutFailure         NULL,
    ipsecFailureErrorCode       IPSecFailureErrorCode
}

IPSecFailureErrorCode ::= INTEGER {
    UNSUPPORTED_CRITICAL_PAYLOAD (1),
    INVALID_MAJOR_VERSION (5),
    INVALID_SYNTAX (7),
    INVALID_MESSAGE_ID (9),
    NO_PROPOSAL_CHOSEN (14),
    INVALID_KE_PAYLOAD (17),
    AUTHENTICATION_FAILED (24),
    SINGLE_PAIR_REQUIRED (34),
    NO_ADDITIONAL_SAS (35),
    INTERNAL_ADDRESS_FAILURE (36),
    FAILED_CP_REQUIRED (37),
    TS_UNACCEPTABLE (38),
    NO_SUBSCRIPTION (9000),
    NETWORK_TOO_BUSY (10000),
    NETWORK_FAILURE (10500),
    ROAMING_NOT_ALLOWED (11000),
    RAT_DISALLOWED (11001)
}

    -------------------------------------------------------------------------------
    ------      mdmiDebug                                              ------------
    -------------------------------------------------------------------------------
        -------------------------------------------------------------------------------
        ------      mdmiDebug Config                                       ------------
        -------------------------------------------------------------------------------

deviceName OBJECT-TYPE
    SYNTAX  OCTET STRING
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Human-readable name of the device"
::= {debugConfig 1}

mibVersion OBJECT-TYPE
    SYNTAX  OCTET STRING
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "The MIB version that the device supports"
::= {debugConfig 2}

        -------------------------------------------------------------------------------
        ------      mdmiDebug KPIs                                         ------------
        -------------------------------------------------------------------------------

-- This log is generated every 1s
roamingIndicator OBJECT-TYPE
    SYNTAX  RoamingIndicator
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Roaming Indicator"
::= {debugKpis 1}

    RoamingIndicator ::= SEQUENCE {
        inHomeNetwork   BOOLEAN,
        networkName     OCTET STRING,   -- only valid when inHomeNetwork is false
        plmn            PLMN            -- PLMN for home network if inHomeNetwork if true, otherwise, the PLMN for roaming network
    }


        -------------------------------------------------------------------------------
        ------      mdmiDebug Events                                       ------------
        -------------------------------------------------------------------------------

-- This log is generated whenever there is a change in the RAT.
ratEvent OBJECT-TYPE
    SYNTAX  RatInfo
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "RAT event"
::= {debugEvents 1}

-- This log is generated whenever the call is connected or disconnected 
callEventWithRAT OBJECT-TYPE
    SYNTAX  CallEventWithRAT
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "VoLTE cal event"
::= {debugEvents 2}

    CallEventWithRAT ::= SEQUENCE {
        callStatus      CallStatus,
        callType        CallType,
        ratInfo         RatInfo,
        callDirection   CallDirection
    }

    CallDirection ::= INTEGER {
        MO (0),
        MT (1)
    }

-- This event is reported at the end of "System Determination" procedure. It includes the list of all PLMNs that can be read and scanned during the "System Determination" procedure.
plmnSearchEvent OBJECT-TYPE
    SYNTAX  PlmnSearch
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PLMN Search Info"
::= {debugEvents 3}

    PlmnSearch ::= SEQUENCE OF PlmnScan

    PlmnScan ::= SEQUENCE {
        timeScanStart   TimeStamp,
        timeScanEnd     TimeStamp,
        rat             CellularRatInfo,
        plmn            PLMN,
        bandIndicator   BandIndicator,
        dlEARFCN        Earfcn,
        ulEARFCN        Earfcn
    }

        -------------------------------------------------------------------------------
        ------      mdmiDebug Reserved                                     ------------
        -------------------------------------------------------------------------------

location-fix-result OBJECT-TYPE
    SYNTAX  LocationResult2D
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Latest location fix result"
::= {debugReserved 1}

    LocationResult2D ::= CHOICE {
        valid-location  Location2D,
        location-null   NULL
    }
    Location2D ::= SEQUENCE {
        latitude    OCTET STRING(SIZE (8)), -- Latitude value as double (IETF 754)
        longitude   OCTET STRING(SIZE (8))  -- Longitude value as double (IETF 754)
    }

wifiInfoHLOS OBJECT-TYPE
    SYNTAX  WifiInformation
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "WiFi Info"
::= {debugReserved 2}

    WifiInformation ::= SEQUENCE {
        bssid               OCTET STRING,
        ssid                OCTET STRING,
        rssi                OCTET STRING,
        detailState         OCTET STRING,
        supplicantState     OCTET STRING,
        ip                  OCTET STRING,
        linkSpeed           INTEGER,        -- in Mbps
        macAddress          OCTET STRING,
        networkID           OCTET STRING,
        hiddenSSID          OCTET STRING,
        gateway             OCTET STRING,
        netMask             OCTET STRING,
        dns1                OCTET STRING,
        dns2                OCTET STRING,
        serverIP            OCTET STRING
    }

    -------------------------------------------------------------------------------
    ------      mdmiLte RRC                                            ------------
    -------------------------------------------------------------------------------

        -------------------------------------------------------------------------------
        ------      mdmiLte RRC KPIs                                       ------------
        -------------------------------------------------------------------------------

-- MCC/MNC
-- This log is generated every time the serving cell changes and every time there is a SI update
mccMncValue OBJECT-TYPE
    SYNTAX  MCC-MNC
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Value of MCC and MNC"
::= {lteRrcKpis 1}

-- Band Indicator
-- This log is generated every time the serving cell changes and every time there is a SI update
bandIndicatorValue OBJECT-TYPE
    SYNTAX  BandIndicator
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Band Indicator"
::= {lteRrcKpis 2}

-- Downlink Bandwidth
-- This log is generated every time the serving cell changes and every time there is a SI update
dlBandwidthValue OBJECT-TYPE
    SYNTAX  Bandwidth
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Downlink Bandwidth"
::= {lteRrcKpis 3}

    Bandwidth ::= INTEGER {
        Bandwidth-1-4-Mhz (1),  --1.4 MHz
        Bandwidth-3-Mhz (2),    --3 MHz
        Bandwidth-5-Mhz (3),    --5 MHz
        Bandwidth-10-Mhz (4),   --10 MHz
        Bandwidth-15-Mhz (5),   --15 MHz
        Bandwidth-20-Mhz (6)    --20 MHz
    }

-- Uplink Bandwidth
-- This log is generated every time the serving cell changes and every time there is a SI update
ulBandwidthValue OBJECT-TYPE
    SYNTAX  Bandwidth
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Uplink Bandwidth"
::= {lteRrcKpis 4}

-- Downlink Frequency
-- This log is generated every time the serving cell changes and every time there is a SI update
dlFrequencyValue OBJECT-TYPE
    SYNTAX  Earfcn
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Downlink Frequency as EARFCN"
::= {lteRrcKpis 5}

-- Uplink Frequency
-- This log is generated every time the serving cell changes and every time there is a SI update
ulFrequencyValue OBJECT-TYPE
    SYNTAX  Earfcn
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Uplink Frequency as EARFCN"
::= {lteRrcKpis 6}

-- This log is generated every time the serving cell changes and every time there is a SI update.
trackingAreaCode OBJECT-TYPE
    SYNTAX  TrackingAreaCode
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Tracking area code"
::= {lteRrcKpis 7}

    TrackingAreaCode ::= INTEGER(0..65535)      -- the unique code that each operator assigns to each of their Tracking Areas (TAs)

-- Cell Identity - from RRC SIB
-- This log is generated every time the serving cell changes and every time there is a SI update
cellIdValue OBJECT-TYPE
    SYNTAX  CellId
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Cell Identity"
::= {lteRrcKpis 8}

    CellId ::= INTEGER (0..268435455)

        -------------------------------------------------------------------------------
        ------      mdmiLte RRC Events                                     ------------
        -------------------------------------------------------------------------------

-- This log is generated when there is a cell reselection event
cellReselectionEvent OBJECT-TYPE
    SYNTAX  CellReselectionEventType
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Events relating to Cell Reselection"
::= {lteRrcEvents 1}

    CellReselectionEventType ::= CHOICE {
        cellReselectionAttempt  NULL,
        cellReselectionFailure  CellReselectionFailureType
    }

    CellReselectionFailureType ::= INTEGER {
        Sync-Failure (1),
        Sib-Read-Failure (2),
        Weak-Downlink-Indicator (3),
        Cell-Barred (4),
        Non-Valid-Plmn (5),
        Forbidden-Tracking-Area (6),
        Aborted (7),
        Forbidden-CSG-Id (8),
        IRAT-Reselection-Failure (9),
        Frequency-Barred (10)
    }

-- This log is generated when there is a handover event
handoverEvent OBJECT-TYPE
    SYNTAX  HandoverEventType
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Events relating to Handover"
::= {lteRrcEvents 2}

    HandoverEventType ::= SEQUENCE {
        handoverResult      HandoverResult,
        targetCell          TargetCell
    }
    
    TargetCell ::= SEQUENCE {
        earfcn                 Earfcn,                 -- EARFCN
        physicalCellID         INTEGER (0..504),       -- Physical Cell ID
        targetCellRsrp         INTEGER (-180..-30)      -- Target cell RSRP in dBm
    }

    HandoverResult ::= CHOICE {
        handoverSuccess NULL,
        handoverFailure HandoverFailureType
    }

    HandoverFailureType ::= INTEGER {
        Other (1),                  -- Other reason instead of reason below
        InvalidCfg (2),             -- Validation failure
        PhysicalFailure (3),        -- Physical layer failure on the target cell
        Rach (4),                   -- T304 expiry due to RACH failure on target cell
        RachMeasConfigIncluded (5)  -- T304 expiry due to RACH failure on target cell when MeasConfig IE was included
    }

-- This log is generated when UE detects RLF
radioLinkFailureEvent OBJECT-TYPE
    SYNTAX  RadioLinkFailureEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Event indicating Radio Link Failure"
::= {lteRrcEvents 3}

    RadioLinkFailureEvent ::= SEQUENCE {
        rlfCounter      RadioLinkFailureEventCounter,          -- Counter to show how many times UE has detected RLF since UE entered RRC CONNECTED state
        rlfCause        RlfCause,                              -- RLF cause
        rlfCauseOther   OCTET STRING(SIZE (0..20))             -- RLF cause other only valid when rlfCause = 7
    }

    RadioLinkFailureEventCounter ::= INTEGER (1..255)

    RlfCause ::= INTEGER {
        configurationFailue(0),
        handoverFailure(1),
        rachFailure(2),
        maxRetransmission(3),
        ipCheckFailue(4),
        sibReadingFailure(5),
        mibChange(6),
        other(7)
    }

-- This log is generated when UE transition to a new cell
newCellEvent OBJECT-TYPE
    SYNTAX  NewCellEventType
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "This Event is logged when UE transition to a new cell"
::= {lteRrcEvents 4}

    NewCellEventType ::= SEQUENCE {
        cause   NewCellCause,
        campedStatus    NewCellStatus
    }
    NewCellCause ::= INTEGER {
        cellSelection (1),
        cellReselection (2),
        handover (3),
        redirection (4)
    }
    NewCellStatus   ::= INTEGER {
        suitable (1),
        acceptable (2)
    }

-- This log is generated every time there is RRC state change
rrcStateChangeEvent OBJECT-TYPE
    SYNTAX  RrcStateChangeEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "RRC state change event"
::= {lteRrcEvents 5}
    
    RrcStateChangeEvent ::= SEQUENCE {
        rrcState                RrcState,               -- RRC state
        rrcStateChangeCause     RrcStateChangeCause     -- Trigger for RRC state change
    }
    
    RrcState ::= INTEGER {
        null(0),
        idleCampedOnAnyCell(1),
        idleCampedNormally(2),
        idlConnecting(3),
        connectedNormally(4),
        releasing(5)            -- when going from connected to idle
    }
    
    -- Note that cause codes are defined only when a transition from a stable to stable state happens.
    RrcStateChangeCause ::= INTEGER {
        toNull (0),                         -- Generic cause for all state transitions to null state. From any stable state other than null to null state.
        IdleFromUpperLayer (1),             -- Camped due to connection aborted from upper layers. From any stable state to idlecampednormally.
        idleT300Expiry (2),                 -- Camped due to T300expiry. From any stable state other than connectednormally to idlecampednormally.
        idleConnectionReject (3),           -- Camped due to connection rejected from eNB. From any stable state other than connectednormally to idlecampednormally.
        idleCellReselectionFailure (4),     -- Camped due to cell reselection. From idlecampednormally to idlecampednormally.
        idleBarred (5),                     -- Camped due to access barring. From any stable state to idlecampednormally.
        idleOtherRrcFailue (6),             -- Camped due to other reasons. From any stable state to idlecampednormally.
        idleEnteringLte (7),                -- From null to idlecampednormally.
        connectingEmergencyCall (8),        -- Enter connecting due to emergency call. Any stable state other than connectednormally to connectednormally
        connectingHighPriAccess (9),        -- Enter connecting due to high priority access. From idlecampednormally to connectednormally.
        connectingReceiveCall (10),         -- Enter connecting due to receiving call. From idlecampednormally to connectednormally.
        connectingMakingCall (11),          -- Enter connecting due to making call. From idlecampednormally to connectednormally.
        connectingMoData (12),              -- Enter connecting due to originating a data session. From idlecampednormally to connectednormally.
        embmsFileRepair (13),               -- From idleCampedNormaly to connectedNormally.
        embmsReceptionReport(14),           -- From idleCampedNormaly to connectedNormally.
        connectingVolteCall (15),           -- Enter connecting due to VoLTE call. From idlecampednormally to connectednormally.
        connectedHoFailure (16),            -- Camped on a cell in connected state due to handover failure. From connectednormally to idlecampednormally or idlecampedonanycell.
        connectedOther (17),                -- Camped on a cell in connected state due to other reasons. From connectednormally to idlecampednormally or idlecampedonanycell.
        releasingT311Expriry (18),          -- Enter releasing due to T311 expiry. From connected normally to idlecampednormally.
        releasingT301Expriry (19),          -- Enter releasing due to T301 expiry. From connected normally to idlecampednormally.
        releasingReject (20),               -- Enter releasing due to RRC connection reestablishment reject. From connected normally to idlecampednormally.
        connectingOther (21)                -- From idlecampednormally to connectednormally for other procedures like Extended service request, TAU, or RRC reestablishment
    }

-- This log is generated every time a rrc timer expires.
rrcTimerExpiryEvent OBJECT-TYPE
    SYNTAX  RrcTimerExpiryEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "RRC timer expiry event"
::= {lteRrcEvents 6}
    
    RrcTimerExpiryEvent ::= INTEGER {
        t300(1),
        t301(2),
        t302(3),
        t303(4),
        t304(5),
        t305(6),
        t311(7),
        t320(8),
        t321(9),
        other(10)
    }

-- This log is generated when there are MIB and SIBs to read
mibSibReadEvent OBJECT-TYPE
    SYNTAX  MibSibReadEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "MIB and SIB read event"
::= {lteRrcEvents 7}

    MibSibReadEvent ::= CHOICE {
        readSuccess         MibSibContent,     -- read MIB and SIB content successfully
        readFail            NULL               -- fail to read
    }
    
    MibSibContent ::= SEQUENCE {
        mibContent      MibContent,                         -- MIB content
        sibMask         INTEGER                             -- RRC OTA message which contains sibs mask
    }
    
    MibContent ::= SEQUENCE {
        pci         INTEGER (0..504),           -- pci
        freq        Earfcn,                     -- EARFCN
        antennas    INTEGER,                    -- Number of Tx antennas detected
        bandwidth   Bandwidth                   -- Downlink bandwidth
    }

        -------------------------------------------------------------------------------
        ------      mdmiLte RRC Messages                                   ------------
        -------------------------------------------------------------------------------

-- RRC OTA Message from 3GPP 36.331
rrc-OTA-Message OBJECT-TYPE
    SYNTAX  RrcMessageReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "RRC OTA Message - most recent."
::= {lteRrcMessages 1}

    RrcMessageReport ::= SEQUENCE {
        rrc-version Version3gpp,
        pdu-type    RrcPduType,
        rrcPayload  OCTET STRING(SIZE (1..8192))
    }
    -- PDU Types for RRC messages (must be known to decode payload)
    RrcPduType ::= INTEGER {
        pcch (1),
        dlCcch (2),
        dlDcch (3),
        ulCcch (4),
        ulDcch (5),
        mcch (6),
        bcchDlSch (7)
    }

    -------------------------------------------------------------------------------
    ------      mdmiLte NAS                                            ------------
    -------------------------------------------------------------------------------
        -------------------------------------------------------------------------------
        ------      mdmiLte NAS KPIs                                       ------------
        -------------------------------------------------------------------------------

-- This log record is generated when the ESM context state changes.
esmContextInfo OBJECT-TYPE
    SYNTAX  EsmContextInfo
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Information about the ESM context state"
::= {lteNasKpis 1}

    EsmContextInfo ::= SEQUENCE {
        contextType     ContextType,
        bearerId        INTEGER,        -- ID of the bearer context
        bearerState     BearerState,    -- Bearer State
        radioBearerId   INTEGER,        -- Radio bearer ID corresponding to EPS Bearer ID of the context
        qci             INTEGER         -- QoS Class Identifier (TS 23.203)
    }

    ContextType ::= INTEGER {
        default (0),
        dedicated (1)
    }
    
    BearerState ::= INTEGER {
        null (0),
        activeWaiting (1),
        active (2),
        modifying (3)
    }

        -------------------------------------------------------------------------------
        ------      mdmiLte NAS Events                                     ------------
        -------------------------------------------------------------------------------

-- EMM state and sub-state
-- This log is generated every time the EMM state changes
emmStateValue OBJECT-TYPE
    SYNTAX  EmmStates
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Current EMM State and Substate"
::= {lteNasEvents 1}

    -- Refer to 3GPP TS 24.301 Section 5.1.3.2 for more details
    EmmStates ::= SEQUENCE {
        emmState        EmmStateType,
        emmSubstate     EmmSubstateType
    }

    -- EMM State Values
    EmmStateType ::= INTEGER {
        EmmNull (1),
        EmmDeregistered (2),
        EmmRegisteredInitiated (3),
        EmmRegistered (4),
        EmmTrackingAreaUpdatingInitiated (5),
        EmmServiceRequestInitiated (6),
        EmmDeregisteredInitiated (7)
    }
    
    -- EMM sub-state
    EmmSubstateType ::= INTEGER(0..8)
    
    -- If EMM state is EmmDeregistered(2), EMM sub-state
    -- EmmDeregisteredNoImsi(1)
    -- EmmDeregisteredPlmnSearch(2)
    -- EmmDeregisteredAttachNeeded(3)
    -- EmmDeregisteredNoCellAvailable(4)
    -- EmmDeregisteredAttemptingToAttach(5)
    -- EmmDeregisteredNormalService(6)
    -- EmmDeregisteredLimitedService(7)
    
    
    -- If EMM state is EmmRegistered(4), EMM sub-state
    -- EmmRegisteredNormalService(1)
    -- EmmRegisteredUpdateNeeded(2)
    -- EmmRegisteredAttemptingToUpdate(3)
    -- EmmRegisteredNoCellAvailable(4)
    -- EmmRegisteredPlmnSearch(5)
    -- EmmRegisteredLimitedService(6)
    -- EmmRegisteredImsiDetachInitiated(7)
    -- EmmRegisteredAttemptingToUpdateMm(8)

    -- Others use invalid EMM Substate value (0)

-- This log is generated when a EMM timer expired.
nasEmmTimerExpiryEvent OBJECT-TYPE
    SYNTAX  NasEmmTimerExpiryEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "NAS EMM timer exspiry event"
::= {lteNasEvents 2}
    
    NasEmmTimerExpiryEvent ::= INTEGER {
        t3410(1)
    }

-- This log is generated every time there is a NAS ESM timer expires
nasEsmExpiryEvent OBJECT-TYPE
    SYNTAX  NasEsmExpiryEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "NAS ESM expiry event"
::= {lteNasEvents 3}
    
    NasEsmExpiryEvent ::= INTEGER {
        t3480(1),
        t3482(2),
        t3481(3),
        t3492(4)
    }

-- This log is generated every time UE receives ATTACH REJECT NAS Message
-- For detailed enumeration of EMM Causes, please refer to 3GPP 24.301
emmFailureCauseEvent OBJECT-TYPE
    SYNTAX  EMMCause
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "EMM Cause within NAS ATTACH REJECT Message"
::= {lteNasEvents 4}

    EMMCause ::= INTEGER(0 .. 255)

        -------------------------------------------------------------------------------
        ------      mdmiLte NAS Messages                                   ------------
        -------------------------------------------------------------------------------

-- NAS Messages from 3GPP 24.301
nas-OTA-Message OBJECT-TYPE
    SYNTAX  NasMessageReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "NAS OTA Message - most recent."
::= {lteNasMessages 1}

    NasMessageReport ::= SEQUENCE {
        nas-version Version3gpp,
        direction   OtaMessageDirection,
        type    NasMessageType,
        ciphered    BOOLEAN,
        nasPayload  OCTET STRING(SIZE (1..8192))
    }
    NasMessageType ::= INTEGER {
        esm (1),
        emm (2)
    }

    -------------------------------------------------------------------------------
    ------      mdmiLte MAC                                            ------------
    -------------------------------------------------------------------------------
        -------------------------------------------------------------------------------
        ------      mdmiLte MAC KPIs                                       ------------
        -------------------------------------------------------------------------------

macThroughputDL OBJECT-TYPE
-- Downlink throughput measured by the UE during an ftp-download session, on the MAC sub-layer
-- MAC from 3GPP TS 36.321
--http://www.etsi.org/deliver/etsi_ts/136300_136399/136321/12.05.00_60/ts_136321v120500p.pdf
    SYNTAX  ThroughputObject
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Downlink throughput measured by the UE on the MAC sub-layer. Object is time-stamped and geo-referenced."
::= {lteMacKpis 1}

macThroughputUL OBJECT-TYPE
-- Uplink throughput measured by the UE during an ftp-download session, on the MAC sub-layer
-- MAC from 3GPP TS 36.321
--http://www.etsi.org/deliver/etsi_ts/136300_136399/136321/12.05.00_60/ts_136321v120500p.pdf
    SYNTAX  ThroughputObject
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Uplink throughput measured by the UE on the MAC sub-layer. Object is time-stamped and geo-referenced."
::= {lteMacKpis 2}

-- This log is generated every 1s
rachLatency OBJECT-TYPE
    SYNTAX  RachLatency
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "RACH Latency"
::= {lteMacKpis 3}

    RachLatency ::= SEQUENCE {
        sysFrameNumber    SystemFrameNumber,
        subFrameNumber    SubFrameNumber,
        rachLatencyVal    INTEGER           -- time in ms between 1st preamble and response from NW in DL
    }

-- This log is generated every 1s
ulRACHAccessDelayValue OBJECT-TYPE
    SYNTAX  Delay
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Average time required to reach a successful attempt during the sampling period"
::= {lteMacKpis 4}

    Delay ::= SEQUENCE {
        sysFrameNumber    SystemFrameNumber,
        subFrameNumber    SubFrameNumber,
        delay             INTEGER           -- time in ms
    }

-- This log is generated every 500 ms
macDlTransportBlock OBJECT-TYPE
    SYNTAX  MacDlTransportBlock
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "MAC DL Transport block"
::= {lteMacKpis 5}

    MacDlTransportBlock ::= SEQUENCE {
        sysFrameNumber    SystemFrameNumber,
        subFrameNumber    SubFrameNumber,
        tb                INTEGER            -- Total transport block size assigned to the UE for data reception on the DL
    }
    
-- This log is generated every 500 ms
macUlGrant OBJECT-TYPE
    SYNTAX  MacUlGrant
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "MAC UL grant"
::= {lteMacKpis 6}

    MacUlGrant ::= SEQUENCE {
        sysFrameNumber    SystemFrameNumber,
        subFrameNumber    SubFrameNumber,
        ulGrant           INTEGER,            -- Uplink grant size in bytesreception on the DL
        paddingBytes      INTEGER
    }

-- This log is generated when Scheduling Request Period changes
srPeriodChangeEvent OBJECT-TYPE
    SYNTAX  SrPeriod
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Scheduling Request Period Change Event"
::= {lteMacKpis 7}

    SrPeriod ::= SEQUENCE {
        sysFrameNumber                      SystemFrameNumber,
        subFrameNumber                      SubFrameNumber,
        schedulingRequestPeriodValue        INTEGER            -- Scheduling Request Period in ms
    }

        -------------------------------------------------------------------------------
        ------      mdmiLte MAC Events                                     ------------
        -------------------------------------------------------------------------------

-- This log is generated when there is a RACH attempt
macRachAttemptEvent OBJECT-TYPE
    SYNTAX  MacRachAttemptEventType
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Events relating to MAC RACH Attempt"
::= {lteMacEvents 1}

    MacRachAttemptEventType ::= INTEGER {
        Success (0),                                        -- Success
        Failure-At-Msg-2 (1),                               -- Failure at MSG2
        Failure-At-Msg-4-CT-Timer-Expired (2),              -- Failure at MSG4 due to CT timer expired
        Failure-At-Msg-4-CT-Resolution-Not-Passed (3),      -- Failure at MSG4 due to CT resolution is not passed
        Aborted (4)                                         -- Aborted
    }

-- This log is generated when there is a RACH attempt
macRachAttemptReason OBJECT-TYPE
    SYNTAX  MacRachAttemptReasonType
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "This Event gives the reason for a RACH attempt."
::= {lteMacEvents 2}

    MacRachAttemptReasonType ::= INTEGER {
        Connection-Request (1),
        Radio-Link-Failure (2),
        UL-Data-Arrival (3),
        DL-Data-Arrival (4),
        Handover (5)
    }

-- This log is generated every time there is a MAC timer expires
macTimerExpiryEvent OBJECT-TYPE
    SYNTAX  MacTimerExpiryEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "MAC timer expiry event"
::= {lteMacEvents 3}
    
    MacTimerExpiryEvent ::= INTEGER {
        timeAlignmentTimer(1),  -- Time Alignment Timer
        randomAccessTimer(2),   -- Random Access Timer
        contentionTimer(3),     -- Contention Timer
        rachBackOffTimer(4)     -- RACH BackOFF Timer
    }

        -------------------------------------------------------------------------------
        ------      mdmiLte MAC Messages                                   ------------
        -------------------------------------------------------------------------------

-- MAC Messages (transport block) from 3GPP 36.321
mac-OTA-Messages OBJECT-TYPE
    SYNTAX  MacMessageReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "MAC OTA Messages - most recent. Maximum"
::= {lteMacMessages 1}

    MacMessageReport ::= SEQUENCE OF MacMessage

    MacMessage ::= SEQUENCE {
        sysFrameNumber    SystemFrameNumber,
        subFrameNumber    SubFrameNumber,
        mac-version Version3gpp,
        direction   OtaMessageDirection,
        transportChannel TransportChannel,
        macHeader  OCTET STRING(SIZE (0..32))    -- Entire header and the control elements in raw bytes until the beginning of the first MAC SDU, max 32 bytes
    }
    TransportChannel ::= INTEGER {
        bch (1),
        dl-sch (2),
        pch (3),
        mch (4),
        ul-sch (5),
        rach (6)
    }

    -------------------------------------------------------------------------------
    ------      mdmiLte RLC                                            ------------
    -------------------------------------------------------------------------------

        -------------------------------------------------------------------------------
        ------      mdmiLte RLC Common Fields                              ------------
        -------------------------------------------------------------------------------

RadioBearerMode ::= INTEGER {
    AM (0),
    UM (1)   
}

SnFieldLength ::= INTEGER {
    size5 (1),
    size10 (2)
}

RlcPduStatus ::= INTEGER {
    PduData (0),
    PduCtrl (1),
    PduInvalid (2),
    PduDropped (3),
    UmPduDiscarded (4)
}

RlcThroughputObject ::= SEQUENCE {
    timeStamp       TimeStamp,
    location        LocationResult,
    throughput      INTEGER             --in kbps
}

        -------------------------------------------------------------------------------
        ------      mdmiLte RLC KPIs                                       ------------
        -------------------------------------------------------------------------------

rlcThroughputDL OBJECT-TYPE
-- Downlink throughput measured by the UE during an ftp-download session, on the RLC sub-layer
-- RLC from 3GPP TS 36.322
-- http://www.etsi.org/deliver/etsi_ts/136300_136399/136322/12.02.00_60/ts_136322v120200p.pdf
    SYNTAX  RlcThroughputObject
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Downlink throughput measured by the UE on the RLC sub-layer. Object is time-stamped and geo-referenced."
::= {lteRlcKpis 1}

rlcThroughputUL OBJECT-TYPE
-- Uplink throughput measured by the UE during an ftp-download session, on the RLC sub-layer
-- RLC from 3GPP TS 36.322
-- http://www.etsi.org/deliver/etsi_ts/136300_136399/136322/12.02.00_60/ts_136322v120200p.pdf
    SYNTAX  RlcThroughputObject
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Uplink throughput measured by the UE on the RLC sub-layer. Object is time-stamped and geo-referenced."
::= {lteRlcKpis 2}

-- This log is generated every 1s  
rlcDlStats OBJECT-TYPE
    SYNTAX  RlcDlStats
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "RLC DL statistics"
::= {lteRlcKpis 3}
    
    RlcDlStats ::= SEQUENCE {
        rlcDlUnrecoverableErrorNumber        INTEGER,                    -- RLC is in "AM" mode and maximum number of retransmissions (assume the maximum number of retransmission at the eNB side to be 8) for a particular RLC PDU has reached, and that RLC PDU is still received in error, an unrecoverable error has occurred. We assume the PDU has not been lost in each try
        rlcDlRadioBearers                    SEQUENCE OF RlcDlRb         -- RlcDlStats consists a list of RlcDlRb for different radio bearers
    }     
    
    RlcDlRb ::= SEQUENCE {
        configurationIndex                   INTEGER(0..34),     -- Unique radio bearer configuration index
        mode                                 RadioBearerMode,    -- Logical Channel Mode
        reestablishmentCount                 INTEGER,            -- Total count of RLC reestablishment
        rxDataPduCount                       INTEGER,            -- Total count of RLC Data PDUs received
        rxDataPduBytes                       INTEGER,            -- Total count of RLC Data PDU received in bytes
        rxControlPduCount                    INTEGER,            -- Total count of RLC Control PDUs received
        rxControlPduBytes                    INTEGER,            -- Total count of RLC Control PDU received in bytes
        pduInvalidCount                      INTEGER,            -- Total count of RLC PDUs invalid
        pduInvalidBytes                      INTEGER,            -- Total count of RLC PDUs invalid in bytes   
        pduRetransmittedCount                INTEGER,            -- Total count of RLC PDUs retransmitted from receiver perspective
        pduRetransmittedBytes                INTEGER,            -- Total count of RLC PDUs retransmitted in bytes from receiver perspective
        pduDuplicateCount                    INTEGER,            -- Total count of RLC PDUs duplicated
        pduDuplicateBytes                    INTEGER,            -- Total count of RLC PDUs duplicated in bytes
        pduDroppedCount                      INTEGER,            -- Total count of PDUs dropped excluding duplicated
        pduDroppedBytes                      INTEGER,            -- Total count of PDUs dropped in bytes excluding duplicated
        txControlPduCount                    INTEGER,            -- Total count of control PDUs sent
        completeNackCount                    INTEGER,            -- Total count of complete RLC PDU NACKs sent
        segmentNackCount                     INTEGER,            -- Total count of RLC segments NACk sent
        missedUmPduCount                     INTEGER,            -- Total count of UM PDUs missing on DL
        sduOutOrder                          INTEGER,            -- Total count of out of order SDUs forwarded to PDCP during RLC reestablishment
        pduDroppedCountFlowControl           INTEGER,
        pduDroppedBytesFlowControl           INTEGER,
        sduReassembCount                     INTEGER,
        sduReassembBytes                     INTEGER,
        tReorderingExpiryCount               INTEGER,
        tReorderingStartCount                INTEGER,
        rxDataPduCountReEstb                 INTEGER,            -- Total count of RLC Data PDUs received since the last RLC re-establishment
        rxDataPduBytesReEstb                 INTEGER,            -- Total count of RLC Data PDU received in bytes since the last RLC re-establishment
        rxControlPduCountReEstb              INTEGER,            -- Total count of RLC Control PDUs received since the last RLC re-establishment
        rxControlPduBytesReEstb              INTEGER,            -- Total count of RLC Control PDU received in bytes since the last RLC re-establishment
        pduInvalidCountReEstb                INTEGER,            -- Total count of RLC PDUs invalid since the last RLC re-establishment
        pduInvalidBytesReEstb                INTEGER,            -- Total count of RLC PDUs invalid in bytes since the last RLC re-establishment
        pduRetransmittedCountReEstb          INTEGER,            -- Total count of RLC PDUs retransmitted from receiver perspective since the last RLC re-establishment
        pduRetransmittedBytesReEstb          INTEGER,            -- Total count of RLC PDUs retransmitted in bytes from receiver perspective since the last RLC re-establishment
        pduDuplicateCountReEstb              INTEGER,            -- Total count of RLC PDUs duplicated since the last RLC re-establishment
        pduDuplicateBytesReEstb              INTEGER,            -- Total count of RLC PDUs duplicated in bytes since the last RLC re-establishment
        pduDroppedCountReEstb                INTEGER,            -- Total count of PDUs dropped excluding duplicated since the last RLC re-establishment
        pduDroppedBytesReEstb                INTEGER,            -- Total count of PDUs dropped in bytes excluding duplicated since the last RLC re-establishment
        txControlPduCountReEstb              INTEGER,            -- Total count of control PDUs sent since the last RLC re-establishment
        completeNackCountReEstb              INTEGER,            -- Total count of complete RLC PDU NACKs sent since the last RLC re-establishment
        segmentNackCountReEstb               INTEGER,            -- Total count of RLC segments NACk sent since the last RLC re-establishment
        missedUmPduCountReEstb               INTEGER,            -- Total count of UM PDUs missing on DL since the last RLC re-establishment
        sduOutOrderReEstb                    INTEGER,            -- Total count of out of order SDUs forwarded to PDCP during RLC reestablishment since the last RLC re-establishment
        pduDroppedCountFlowControlReEstb     INTEGER,
        pduDroppedBytesFlowControlReEstb     INTEGER,
        sduReassembCountReEstb               INTEGER,
        sduReassembBytesReEstb               INTEGER,
        tReorderingExpiryCountReEstb         INTEGER,
        tReorderingStartCountReEstb          INTEGER
    }
    
-- This log is generated every 1s
rlcUlStats OBJECT-TYPE
    SYNTAX  RlcUlStats
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "RLC UL statistics"
::= {lteRlcKpis 4}
    
    RlcUlStats ::= SEQUENCE {
        rlcUlUnrecoverableErrorNumber        INTEGER,                   -- RLC is in "AM" mode and maximum number of retransmissions for a particular RLC PDU has reached, and ACK has not been received, an unrecoverable error has occurred. We assume the PDU has not been lost in each try. 
        rlcUlRadioBearers                    SEQUENCE OF RlcUlRb         -- RlcUlStats consists a list of RlcUlRb for different radio bearers
    }

    RlcUlRb ::= SEQUENCE {
        configurationIndex              INTEGER(0..34),     -- Unique radio bearer configuration index
        mode                            RadioBearerMode,    -- Logical Channel Mode
        numReestablishment              INTEGER,            -- Total count of RLC reestablishment
        txDataPduCount                  INTEGER,            -- Total count of New Data PDU transmitted
        txDataPduBytes                  INTEGER,            -- Total count of New Data PDU transmitted in bytes including RLC headers
        txSduCount                      INTEGER,            -- Total count of RLC SDUs transmitted
        txSduBytes                      INTEGER,            -- Total count of RLC SDU in bytes transmitted
        txControlPduCount               INTEGER,            -- Total count of RLC control PDU transmitted
        txControlPduBytes               INTEGER,            -- Total count of RLC Control PDU transmitted in bytes
        pduRetransmittedCount           INTEGER,            -- Total count of RLC PDUs retransmitted
        pduRetransmittedBytes           INTEGER,            -- Total count of RLC PDUs retransmitted in bytes
        rxControlPduCount               INTEGER,            -- Total count of RLC Control PDUs received            
        completeNackCount               INTEGER,            -- Total count of Complete RLC PDU NACKs received
        segmentNackCount                INTEGER,            -- Total count of NACKs for RLC Segments received
        rxInvalidControlPduCount        INTEGER,            -- Total count of invalid control PDU received
        numPoll                         INTEGER,
        numTPollRetransmitExpiry        INTEGER,
        txDataPduCountReEstb            INTEGER,            -- Total count of New Data PDU transmitted since last RLC re-establishemnet
        txDataPduBytesReEstb            INTEGER,            -- Total count of New Data PDU transmitted in bytes including RLC headers since last RLC re-establishemnet
        txSduCountReEstb                INTEGER,            -- Total count of RLC SDUs transmitted since last RLC re-establishemnet
        txSduBytesReEstb                INTEGER,            -- Total count of RLC SDU in bytes transmitted since last RLC re-establishemnet
        txControlPduCountReEstb         INTEGER,            -- Total count of RLC control PDU transmitted since last RLC re-establishemnet
        txControlPduBytesReEstb         INTEGER,            -- Total count of RLC Control PDU transmitted in bytes since last RLC re-establishemnet
        pduRetransmittedCountReEstb     INTEGER,            -- Total count of RLC PDUs retransmitted since last RLC re-establishemnet
        pduRetransmittedBytesReEstb     INTEGER,            -- Total count of RLC PDUs retransmitted in bytes since last RLC re-establishemnet
        rxControlPduCountReEstb         INTEGER,            -- Total count of RLC Control PDUs received since last RLC re-establishemnet
        completeNackCountReEstb         INTEGER,            -- Total count of Complete RLC PDU NACKs received since last RLC re-establishemnet
        segmentNackCountReEstb          INTEGER,            -- Total count of NACKs for RLC Segments received since last RLC re-establishemnet
        rxInvalidControlPduCountReEstb  INTEGER,            -- Total count of invalid control PDU received since last RLC re-establishemnet
        numPollReEstb                   INTEGER,
        numTPollRetransmitExpiryReEstb  INTEGER
    }

-- This log is generated every 50ms
rlcUlUmDataPdu OBJECT-TYPE
    SYNTAX  RlcUlUmDataPdu
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "RLC UL UM Data PDU"
::= {lteRlcKpis 5}
    
    RlcUlUmDataPdu ::= SEQUENCE {
        rbConfigIndex       INTEGER (0..34),
        rbMode              RadioBearerMode,
        snFieldLen          SnFieldLength,
        logMask             INTEGER (0..65535),      -- description as below
        pduLogged           RlcPduLogged     
    }

    -- logMask, Bit 0 is the Least Significant Bit
    -- Bit 0, reserved
    -- Bit 1, RLCUL config log
    -- Bit 2, RLCUL AM all PDU log
    -- Bit 3, RLCUL control PDU log
    -- Bit 4, RLCUL polling log
    -- Bit 5, RLCUL signaling log
    -- Bit 6, RLCUL UM data PDU log
    -- Bit 7, RLCUL statistics log
    -- Bit 8, RLCUL AM state log
    -- Bit 9, RLCUL UM state log
    -- Bit 10 to Bit 15, reserved
    
    RlcPduLogged ::= SEQUENCE {
        pduSize                 INTEGER (0..65535),     -- PDU size
        numBytesLogged          INTEGER (0..65535),     -- number of bytes logged
        status                  RlcPduStatus,
        extensionBit            BOOLEAN,
        lengthIndicator         INTEGER,
        framingInfo             INTEGER                 -- 3GPP TS 36.322 Table 6.2.2.6-1           
    }

-- This log is generated every 50ms
rlcDlUmDataPdu OBJECT-TYPE
    SYNTAX  RlcDlUmDataPdu
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "RLC DL UM Data PDU"
::= {lteRlcKpis 6}
    
    RlcDlUmDataPdu ::= SEQUENCE {
        rbConfigIndex       INTEGER (0..34),
        rbMode              RadioBearerMode,
        snFieldLen          SnFieldLength,
        logMask             INTEGER (0..65535),      -- description as below
        pduLogged           RlcPduLogged     
    }

    -- logMask, Bit 0 is the Least Significant Bit
    -- Bit 0, reserved
    -- Bit 1, RLCDL config log
    -- Bit 2, RLCDL AM all PDU log
    -- Bit 3, RLCDL control PDU log
    -- Bit 4, RLCDL polling log
    -- Bit 5, RLCDL signaling log
    -- Bit 6, RLCDL UM data PDU log
    -- Bit 7, RLCDL statistics log
    -- Bit 8, RLCDL AM state log
    -- Bit 9, RLCDL UM state log
    -- Bit 10 to Bit 15, reserved

        -------------------------------------------------------------------------------
        ------      mdmiLte RLC Events                                     ------------
        -------------------------------------------------------------------------------
        -------------------------------------------------------------------------------
        ------      mdmiLte RLC Messages                                   ------------
        -------------------------------------------------------------------------------

-- RLC Messages from 3GPP 36.322
rlc-OTA-Messages OBJECT-TYPE
    SYNTAX  RlcMessageReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "RLC OTA Messages - most recent."
::= {lteRlcMessages 1}

    RlcMessageReport ::= SEQUENCE OF RlcMessage

    RlcMessage ::= SEQUENCE {
        rlc-version         Version3gpp,
        direction           OtaMessageDirection,
        type                RlcMessageType,
        rlcMode             RlcMode,
        snFieldLength       SnFieldLength,
        lIField             BOOLEAN,
        rlcHeader           OCTET STRING(SIZE (0..16))    -- Entire RLC header in raw bytes, max 16 bytes
    }
    RlcMessageType ::= INTEGER {
        data (1),
        control (2)
    }


    -------------------------------------------------------------------------------
    ------      mdmiLte PDCP                                           ------------
    -------------------------------------------------------------------------------

        -------------------------------------------------------------------------------
        ------      mdmiLte PDCP Common Fields                              ------------
        -------------------------------------------------------------------------------
PdcpThroughputObject ::= SEQUENCE {
    timeStamp       TimeStamp,
    location        LocationResult,
    throughput      INTEGER             --in kbps
}
        -------------------------------------------------------------------------------
        ------      mdmiLte PDCP KPIs                                      ------------
        -------------------------------------------------------------------------------

pdcpThroughputDL OBJECT-TYPE
-- Downlink throughput measured by the UE during an ftp-download session, on the PDCP sub-layer
-- PDCP from 3GPP TS 36.323
-- http://www.etsi.org/deliver/etsi_ts/136300_136399/136323/12.03.00_60/ts_136323v120300p.pdf
    SYNTAX  PdcpThroughputObject
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Downlink throughput measured by the UE on the PDCP sub-layer. Object is time-stamped and geo-referenced."
::= {ltePdcpKpis 1}

pdcpThroughputUL OBJECT-TYPE
-- Uplink throughput measured by the UE during an ftp-download session, on the PDCP sub-layer
-- PDCP from 3GPP TS 36.323
-- http://www.etsi.org/deliver/etsi_ts/136300_136399/136323/12.03.00_60/ts_136323v120300p.pdf
    SYNTAX  PdcpThroughputObject
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Uplink throughput measured by the UE on the PDCP sub-layer. Object is time-stamped and geo-referenced."
::= {ltePdcpKpis 2}

-- This log is generated every 1s
pdcpDlStats OBJECT-TYPE
    SYNTAX  PdcpDlStats
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PDCP DL statistics"
::= {ltePdcpKpis 3}

    PdcpDlStats ::= SEQUENCE OF PdcpDlRb        -- PdcpDlStats consists a list of PdcpDlRb for different radio bearers
    
    PdcpDlRb ::= SEQUENCE {
        configurationIndex          INTEGER(0..34),     -- Unique radio bearer configuration index
        rxDataPduBytes              INTEGER,            -- Total number of PDCP Data PDU received in bytes
        rxControlPduBytes           INTEGER,            -- Total number of PDCP Control PDU received in bytes
        rohcFailNum                 INTEGER,            -- Total number of PDCP PDUs ROHC decompression failed
        integrityFailNum            INTEGER,            -- Total number of PDCP PDUs integrity check failed
        missSduToUl                 INTEGER,            -- Total number of PDCP SDUs missing when delivered to upper layers
        missSduFromLl               INTEGER,            -- Total number of PDCP SDUs missing from RLC since reestablishment
        pduDuplicateBytes           INTEGER,            -- Total number of PDCP PDUs duplicated in bytes
        pduInvalidBytes             INTEGER             -- Total number of PDCP PDUs invalid in bytes
    }
    
    
-- This log is generated every 1s 
pdcpUlStats OBJECT-TYPE
    SYNTAX  PdcpUlStats
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PDCP UL statistics"
::= {ltePdcpKpis 4}

    PdcpUlStats ::= SEQUENCE OF PdcpUlRb            -- PdcpUlStats consists a list of PdcpUlRb for different radio bearers
    
    PdcpUlRb ::= SEQUENCE {
        configurationIndex      INTEGER(0..34),     -- Unique radio bearer configuration index
        txDataPduBytes          INTEGER,            -- Total number of PDCP Data PDU transmitted in bytes
        txControlPduBytes       INTEGER,            -- Total number of PDCP Control PDU transmitted in bytes
        pduRohcFail             INTEGER,            -- Total number of PDCP PDUs ROHC compression failed
        sduDiscardBytes         INTEGER,            -- Total number of PDCP SDUs discarded in bytes
        pduRetransmittedBytes   INTEGER             -- Total number of PDCP PDUs retransmitted in bytes
    }

        -------------------------------------------------------------------------------
        ------      mdmiLte PDCP Events                                    ------------
        -------------------------------------------------------------------------------
        -------------------------------------------------------------------------------
        ------      mdmiLte PDCP Messages                                  ------------
        -------------------------------------------------------------------------------

-- PDCP Messages from 3GPP 36.323
pdcp-OTA-Message OBJECT-TYPE
    SYNTAX  PdcpMessageReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PDCP OTA Message - most recent."
::= {ltePdcpMessages 1}

    PdcpMessageReport ::= SEQUENCE {
        pdcp-version            Version3gpp,
        direction               OtaMessageDirection,
        type                    PdcpMessageType,
        radioBearerType         RadioBearerType,
        rlcMode                 RlcMode,
        pdcpSnSize              PdcpSnSize,
        radioBearerConfigId     INTEGER,
        pdcpHeader              OCTET STRING(SIZE (0..8))    -- Entire PDCP header in raw bytes, max 8 bytes
    }
    PdcpMessageType ::= INTEGER {
        data (1),
        control (2)
    }
    RadioBearerType ::= INTEGER {
        drb (1),
        srb (2)
    }
    RlcMode ::= INTEGER {
        rlc-am (1),
        rlc-um (2)
    }
    PdcpSnSize ::= INTEGER {
        null (0),
        len7bits (1),
        len12bits (2),
        len15bits (3)
    }

    -------------------------------------------------------------------------------
    ------      mdmiLte Physical Layer                                 ------------
    -------------------------------------------------------------------------------

        -------------------------------------------------------------------------------
        ------      mdmiLte Phy Common Fields                              ------------
        -------------------------------------------------------------------------------

TransmissionMode ::= INTEGER {
    tmInvalid (0),
    tmSingleAntPort0 (1),
    tmTdRank1 (2),
    tmOlSm (3),
    tmClSm (4),
    tmMuMimo (5),
    tmClRank1Pc (6),
    tmSingleAntPort5 (7),
    mode8 (8),
    mode9 (9)
}

CrcResult ::= INTEGER {
    Fail (0),
    Pass (1)
}

CecAggregationLevel ::= INTEGER {
    agg1 (0),
    agg2 (1),
    agg4 (2),
    agg8 (3)
}

SearchSpaceType ::= INTEGER {
    Common (0),
    User (1)
}

HarqCombining ::= INTEGER {
    Disabled (0),
    Enabled (1)
}

        -------------------------------------------------------------------------------
        ------      mdmiLte Physical Layer Debug                           ------------
        -------------------------------------------------------------------------------
-- This log is generated every 30 sub-frames
lteCellTiming OBJECT-TYPE
    SYNTAX  LteCellTiming
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Provide informations about cell timing"
::= {ltePhyDebug 1} 

LteCellTiming ::= SEQUENCE {
    numOfRecords                INTEGER(0..30),     --each record corresponds to a subframe
    startingSysFrameNum         SystemFrameNumber,
    startingSubFrameNum         SubFrameNumber,
    startingDlFrameTimingOffset INTEGER(0..307200), -- in Ts units
    startingUlFrameTimingOffset INTEGER(0..307200), -- in Ts units
    startingUlTimingAdvance     INTEGER(0..307200), -- in Ts units
    timingAdjust                TimingAdjust
}

TimingAdjust ::= SEQUENCE {
    dlFrameTimingChange     INTEGER(-512..511),
    ulFrameTimingChange     INTEGER(-16..15),
    timingAdvanceChnage     INTEGER(-128..127)
}

        -------------------------------------------------------------------------------
        ------      mdmiLte Physical Layer Measurements                    ------------
        -------------------------------------------------------------------------------

-- This log is generated every 500 ms
servingCellMeasurement OBJECT-TYPE
    SYNTAX  ServingCellMeasurement
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Measurements of Serving Cell"
::= {ltePhyMeasurements 1}

    ServingCellMeasurement ::= SEQUENCE {
        sysFrameNumber      SystemFrameNumber,
        subFrameNumber      SubFrameNumber,
        pci                 INTEGER (0..504),
        rsrp                INTEGER (-180..-30),    -- RSRP Value in dBm    
        rsrp0               INTEGER (-180..-30),    -- RSRP Value for Rx0 in dBm
        rsrp1               INTEGER (-180..-30),    -- RSRP Value for Rx1 in dBm
        rsrq                INTEGER (-30..10),      -- RSRQ Value in dB
        rsrq0               INTEGER (-30..10),      -- RSRQ Value for Rx0 in dB
        rsrq1               INTEGER (-30..10),      -- RSRQ Value for Rx1 in dB
        rssi                INTEGER (-110..-10),    -- RSSI Value in dBm
        rssi0               INTEGER (-110..-10),    -- RSSI Value for Rx0 in dBm
        rssi1               INTEGER (-110..-10),    -- RSSI Value for Rx1 in dBm
        sinr                INTEGER (-20..30),      -- SINR Value in dBm
        sinr0               INTEGER (-20..30),      -- SINR Value for Rx0 in dBm
        sinr1               INTEGER (-20..30),      -- SINR Value for Rx1 in dBm
        earfcn              Earfcn,                 -- EARFCN
        priority            INTEGER (0..7),         -- The priority of the layer that the cell resides on
        isIdleMode          BOOLEAN,
        bandWidth           Bandwidth,
        carrierType         CarrierType               
    }

-- This log is generated every 500 ms
neighborCellMeasurements OBJECT-TYPE
    SYNTAX  NeighborCellMeasurements
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Neighbor Cell Measurements"
::= {ltePhyMeasurements 2}

    NeighborCellMeasurements ::= SEQUENCE OF NeighborCellMeasurement        -- up to 20 detected neighbor cells
    NeighborCellMeasurement ::= SEQUENCE {
        sysFrameNumber      SystemFrameNumber,
        subFrameNumber      SubFrameNumber,
        pci                 INTEGER (0..504),
        rsrp                INTEGER (-180..-30),    -- RSRP Value in dBm    
        rsrp0               INTEGER (-180..-30),    -- RSRP Value for Rx0 in dBm
        rsrp1               INTEGER (-180..-30),    -- RSRP Value for Rx1 in dBm
        rsrq                INTEGER (-30..10),      -- RSRQ Value in dB
        rsrq0               INTEGER (-30..10),      -- RSRQ Value for Rx0 in dB
        rsrq1               INTEGER (-30..10),      -- RSRQ Value for Rx1 in dB
        rssi                INTEGER (-110..-10),    -- RSSI Value in dBm
        rssi0               INTEGER (-110..-10),    -- RSSI Value for Rx0 in dBm
        rssi1               INTEGER (-110..-10),    -- RSSI Value for Rx1 in dBm
        earfcn              Earfcn,                 -- EARFCN
        priority            INTEGER (0..7),         -- The priority of the layer that the cell resides on
        duplexType          DuplexType
    }

-- Downlink Transmission Mode from 3GPP 36.213
-- This log is generated every 1s when subscribed
dlTransmissionModeValue OBJECT-TYPE
    SYNTAX  TransmissionModeValue
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Downlink Transmission Mode"
::= {ltePhyMeasurements 3}

    TransmissionModeValue ::= SEQUENCE {
        sysFrameNumber      SystemFrameNumber,
        subFrameNumber      SubFrameNumber,
        transMode           TransmissionMode
    }

-- Uplink Transmission Mode from 3GPP 36.213
-- This log is generated every 1s when subscribed
ulTransmissionModeValue OBJECT-TYPE
    SYNTAX  TransmissionModeValue
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Uplink Transmission Mode"
::= {ltePhyMeasurements 4}

dlPhysLayerThroughputValue OBJECT-TYPE
    SYNTAX  Throughput
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "L1 downlink throughput measured at the HARQ level. Transport blocks received by the UE with CRC errors shall be included."
::= {ltePhyMeasurements 5}

    Throughput ::= SEQUENCE {
        sysFrameNumber      SystemFrameNumber,
        subFrameNumber      SubFrameNumber,
        throughput          INTEGER 
    }

ulPhysLayerThroughputValue OBJECT-TYPE
    SYNTAX  Throughput
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "L1 uplink throughput measured at the HARQ level, excluding the transport blocks received by the UE with CRC errors."
::= {ltePhyMeasurements 6}

-- This log is generated every 1s
ulTimingAdvanceValue OBJECT-TYPE
    SYNTAX  TimingAdvance
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Number of TA units signaled by the eNode B to the UE."
::= {ltePhyMeasurements 7}

    TimingAdvance ::= SEQUENCE {
        sysFrameNumber      SystemFrameNumber,
        subFrameNumber      SubFrameNumber,
        timingAdvance       INTEGER             --in TA units microseconds 
    }

-- This log is generated every 1s
ulTxPowerHeadroomValue OBJECT-TYPE
    SYNTAX  Headroom
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Total remaining power at the UE before reaching its maximum nominal power."
::= {ltePhyMeasurements 8}

    Headroom ::= SEQUENCE {
        sysFrameNumber      SystemFrameNumber,
        subFrameNumber      SubFrameNumber,
        headroom-value      INTEGER (-23..40)  --headroom value in dB
    }

-- This log is generated every 1s
ulMCSValue OBJECT-TYPE
    SYNTAX  McsValue
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "MCS signaled by the eNodeB to the UE."
::= {ltePhyMeasurements 9}

    McsValue ::= SEQUENCE {
        sysFrameNumber      SystemFrameNumber,
        subFrameNumber      SubFrameNumber,
        mcs                 MCS
    }

-- This log is generated every 500 ms
pssResult OBJECT-TYPE
    SYNTAX  PssResult
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "parameters related to PSS"
::= {ltePhyMeasurements 10}
    
    PssResult ::= SEQUENCE {
        sysFrameNumber      SystemFrameNumber,
        subFrameNumber      SubFrameNumber,
        pssRecords          SEQUENCE OF PssRecord
    }

    PssRecord ::= SEQUENCE {
        peakValue           INTEGER,             -- PSS peak value in dB
        peakPosition        INTEGER (0..10000),  -- Sample position with 5ms resolution
        index               INTEGER (0..2)       -- PSS index
    }
       
-- This log is generated every 500 ms
sssResult OBJECT-TYPE
    SYNTAX  SssResult
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "parameters related to SSS"
::= {ltePhyMeasurements 11}

    SssResult ::= SEQUENCE OF SssCellInfo
    SssCellInfo ::= SEQUENCE {
        sysFrameNumber      SystemFrameNumber,
        subFrameNumber      SubFrameNumber,
        pci                 INTEGER (0..504),
        peakValue           INTEGER,                -- SSS peak value in dB
        frameBoundary       INTEGER,                -- Frame boundary RTC counter
        cyclicPrefix        CyclicPrefix,            -- Cyclic prefix used
        barredCells         SEQUENCE OF BarredCell,
        detectedCells       SEQUENCE OF DetectedCell
    }
    
    CyclicPrefix ::= INTEGER {                  -- Cyclic prefix used
        normal (0),
        extended (1)
    }

    BarredCell ::= SEQUENCE {
        cellId  INTEGER (0..504)
    }

    DetectedCell ::= SEQUENCE {
        cellId  INTEGER (0..504),
        earfcn  Earfcn
    }
 
-- This log is generated when there is a RACH attempt
rachMsgReport OBJECT-TYPE
    SYNTAX  RachMsgReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "RACH MSG 1 2 3 4 info"
::= {ltePhyMeasurements 12}

    RachMsgReport ::= SEQUENCE {
        sysFrameNumber      SystemFrameNumber,
        subFrameNumber      SubFrameNumber,
        msg1    CHOICE {
            msg1Null        NULL,               -- unavailable
            msg1Content     Msg1Content
        },
        msg2    CHOICE {
            msg2Null        NULL,               -- unavailable
            msg2Content     Msg2Content
        },
        msg3    CHOICE {
            msg3Null        NULL,               -- unavailable
            msg3Content     Msg3Content
        },
        msg4    CHOICE {
            msg4Null        NULL,               -- unavailable
            msg4Content     Msg4Content
        }
    }
    
    Msg1Content ::= SEQUENCE {
        sequence        INTEGER (0..63),        -- Preamble sequence index
        prachTxPower    INTEGER (-112..23),     -- PRACH tx power
        duplexMode      INTEGER (0..1)          -- 0: FDD   1: TDD
    }
    
    Msg2Content ::= SEQUENCE {
        timingAdvance           CHOICE {
            timingAdvanceNull   NULL,
            timingAdvanceValue  INTEGER             -- in TA units microseconds
        },
        contentionType          INTEGER (0..1),     -- 0: Contention Free   1: Contention Based
        rntiType                RntiType,           -- RNTI type
        rntiValue               INTEGER             -- RNTI Value
    }
    
    RntiType ::= INTEGER {
        cRnti (0),              -- C-RNTI
        spsRnti (1),            -- SPS-RNTI
        pRnti (2),              -- P-RNTI
        raRnti (3),             -- RA-RNTI
        tempCRnti (4),          -- TEMP-C-RNTI
        siRnti (5),             -- SI-RNTI
        tpcPuschRnti (6),       -- TPC-PUSCH-RNTI
        tpcPucchRnti (7),       -- TPC-PUCCH-RNTI
        mbmsRnti (8)            -- MBMS-RNTI
    }
    
    Msg3Content ::= SEQUENCE {
        mcs                 INTEGER,            -- Modulation and Coding Scheme
        modulationType      ModulationType,   -- Modulation stream type
        startRb             INTEGER (1..110),   -- Starting resource block number of the received grant
        numRb               INTEGER (1..110),   -- Total number of Resource blocks allocated in the grant
        tbSizeIndex         INTEGER (0..26)     -- Transport block size index
    }

    ModulationType ::= INTEGER {
        BPSK (0),
        QPSK (1),
        QAM16 (2),
        QAM64 (3)
    }
    
    Msg4Content ::= SEQUENCE {
        contentionResult    INTEGER {           -- Contention result
            failed (0),
            passed (1)
        }
    }

mimoPDSCHthroughput0Value OBJECT-TYPE
    SYNTAX  Throughput
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PDSCH data rate measured by the UE for the downlink on the code word 0 layer."
::= {ltePhyMeasurements 13}

mimoPDSCHthroughput1Value OBJECT-TYPE
    SYNTAX  Throughput
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PDSCH data rate measured by the UE for the downlink on the code word 1 layer."
::= {ltePhyMeasurements 14}

-- This log is generated every 500 ms
srsTxPowerMeasurement OBJECT-TYPE
    SYNTAX  SrsTxPowerReports
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "SRS Tx Power measurement"
::= {ltePhyMeasurements 15}
    
    SrsTxPowerReports ::= SEQUENCE OF SrsTxPowerReport

    SrsTxPowerReport ::= SEQUENCE {
        systemFrameNumber   SystemFrameNumber,
        subFrameNumber      SubFrameNumber,
        srsTxPowerValue     SrsTxPowerValue,
        fi                  PowerControlAccumalationFactor,     -- Power control accumalation factor
        pathLoss            INTEGER (0..255),
        srsTxBw             INTEGER (0..255)                    -- SRS Transmission Bandwidth
    }

    SrsTxPowerValue ::= INTEGER (-112..23)  --SRS Tx Power measurement in dB

-- This log is generated every 500 ms
srsTxReports OBJECT-TYPE
    SYNTAX  SrsTxReports
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "SRS Tx Report"
::= {ltePhyMeasurements 16}

    SrsTxReports ::= SEQUENCE {
        servingCellId        INTEGER (0..504),
        reports              SEQUENCE OF SrsTxReport
    }

    SrsTxReport ::= SEQUENCE {
        systemFrameNumber    SystemFrameNumber,
        subFrameNumber       SubFrameNumber,
        ueSrsEnabled         BOOLEAN,
        cellSrsEnabled       BOOLEAN,
        startRB              INTEGER (0..110),
        numOfRB              INTEGER (0..110),
        zcRoot               INTEGER (1..1151),
        carrierIndex         CarrierIndex,
        srsTxPower           INTEGER (-50..23),
        duplexType           DuplexType,
        upPtsType            UpPtsType,           
        srsTriggerType       SrsTriggerType,
        cyclicShift          CyclicShift,
        srsPowerOffset       SrsPowerOffset
    }

    UpPtsType ::= INTEGER {
        NoSrsPresent (0),
        SrsSentOnUpPtsSymbol0 (1),
        SrsSentOnUpPtsSymbol1 (2),
        SrsSentOnBothUpPtsSymbols (3)
    }

    SrsTriggerType ::= INTEGER {
        Type0 (0),
        Type1Dci0 (1),
        Type1Dci1A2B2C (2),
        Type1Dci4 (3)
    }

    CyclicShift ::= INTEGER (0..7)

    SrsPowerOffset ::= INTEGER {
        Offset0 (0),
        Offset1 (1)
    }

-- This log is generated every 500 ms
dciInformationReports OBJECT-TYPE
    SYNTAX  DciInformationReports
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "DCI Information Reports"
::= {ltePhyMeasurements 17}

    DciInformationReports ::= SEQUENCE {
        duplexType          DuplexType,
        reports             SEQUENCE OF DciInformationReport
    }
    
    DciInformationReport ::= SEQUENCE {
        systemFrameNumber   SystemFrameNumber,
        subFrameNumber      SubFrameNumber,
        pdcchOrderPresent   BOOLEAN,
        ulDciGrantInfo      CHOICE {
            ulDciGrantNotPresent    NULL,
            ulDciGrantPresent       UlDciGrantInfo
        },
        tpcDciInfo        CHOICE {
            tpcDciNotPresent      NULL,
            tpcDciPresent         UlTpcDciInfo
        },
        dlDciGrantInfo      SEQUENCE OF DlDciGrantInfo     -- If no DCI Grant Info presents, this SEQUENCE length can be zero
    }

    UlDciGrantInfo ::= SEQUENCE {
        mcsIndex                            INTEGER (0..31),
        cqiRequest                          INTEGER (0..3),
        startResourceBlock                  INTEGER (1..110),       -- starting RB for the received grant
        numResourceBlock                    INTEGER (1..110),       -- total number of TBs allocated in the grant
        tbSizeIndex                         INTEGER (0..31),        -- transport block size index
        modulationType                      ModulationType,
        harqId                              INTEGER (0..7),
        hoppingFlag                         HoppingFlag,
        ndi                                 INTEGER,                -- New Data Indicator
        tpc                                 INTEGER,
        demodulationRefSignalCyclicShift    INTEGER,
        dci0KPusch                          INTEGER,
        redundancyVersionIndex              INTEGER
    }

    UlTpcDciInfo ::= SEQUENCE {
        tpcDciFormatType    TpcDciFormat   
    }

    DlDciGrantInfo ::= SEQUENCE {
        servingCellIndex    ServingCellIndex,
        dlGrantFormatType   DlGrantPdcchFormatType,
        numAckNacBits       INTEGER (0..2),
        dlGrantTpcCommand   INTEGER
    }

    DlTpcDciInfo ::= SEQUENCE {
        tpcDciRntiType      RntiType  
    }

    TpcDciFormat ::= INTEGER {
        Format3 (0),
        Format3a (1)
    }

    DlGrantPdcchFormatType ::= INTEGER {
        Format0 (0),
        Format1 (1),
        Format1a (2),
        Format1b (3),
        Format1c (4),
        Format1d (5),
        Format2 (6),
        Format2a (7)
    }

    HoppingFlag ::= INTEGER {
        Disabled (0),
        Enabled (1)
    }

-- This log is generated every time RRC configures it or SIB2 get updated by the network.
pagingDRXEvent OBJECT-TYPE
    SYNTAX  PagingDRX
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Paging DRX Event"
::= {ltePhyEvents 1}

    PagingDRX ::= SEQUENCE {
        earfcn                  Earfcn,
        pci                     INTEGER(0..504),
        pagingCycle             PagingCycle,
        nb                      DrxNb,
        ueId                    INTEGER (0..1023),      -- IMSI mod 1024
        drxSysFrameNumOffset    INTEGER,                -- drxSysFrameNumOffset is used to obtain the starting system frame number for DRX cycle.
        drxSubFrameNumOffset    INTEGER                 -- drxSubFrameNumOffset is used to obtain the starting sub frame number for DRX cycle.
    }

    PagingCycle ::= INTEGER {
        PagingCycle320ms (0),
        PagingCycle640ms (1),
        PagingCycle1280ms (2),
        PagingCycle2560ms (3)
    }

    DrxNb ::= INTEGER {
        FourT (0),
        TwoT (1),
        OneT (2),
        halfT (3),
        quarterT (4),
        oneEightT (5),
        oneSixteenthT (6),
        oneThirtySecondT (7)
    }

        -------------------------------------------------------------------------------
        ------      mdmiLte Physical Layer Events                          ------------
        -------------------------------------------------------------------------------
        -------------------------------------------------------------------------------
        ------      mdmiLte Physical Layer PMCH                            ------------
        -------------------------------------------------------------------------------
-- This log is generated every 20 ms
pmchReport OBJECT-TYPE
    SYNTAX  PmchReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PMCH Report"
::= {ltePhyPmch 1}

PmchReport ::= SEQUENCE {
    pmchs       SEQUENCE OF PMCH   -- PMCHs in each MBSFN area, should be updated when related SIB changes
}

PMCH ::= SEQUENCE OF MTCH       -- MTCHs on each PMCH

MTCH ::= SEQUENCE {
    bler            INTEGER,        -- BLER on each MTCH being consumed, represented as a percentage value less than 100
    dataRate        INTEGER,        -- Data rate on each MTCH, in mbps
    tmgi            INTEGER         -- TMGI of each MTCH to be updated when SIB changes
}

-- {ltePhyPmch 2} reserved for PMCH Stats

-- This log is generated every 500 ms
pmchDecodingResults OBJECT-TYPE
    SYNTAX  PmchDecodingResults
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PMCH Decoding Results"
::= {ltePhyPmch 3}

    PmchDecodingResults ::= SEQUENCE OF PmchDecodingResult

    PmchDecodingResult ::= SEQUENCE {
        systemFrameNumber   SystemFrameNumber,
        subFrameNumber      SubFrameNumber,
        servingCellIndex    ServingCellIndex,
        pmchId              INTEGER (0..255),
        areaId              INTEGER (0..255),  
        numOfRB             INTEGER (0..110),
        numOfLayers         INTEGER (1..4),
        transportblocks     SEQUENCE OF PmchTransportBlock         
    }
    
    PmchTransportBlock ::= SEQUENCE {
        harqId              INTEGER(0..14), -- Harq ID 36.213 section 7. Up to 8 for FDD (0-7), up to 15 for TDD (0-14).
        redundancyVersion   INTEGER(0..3),
        newDataIndicator    INTEGER(0..1),                 
        crcResult           CrcResult,
        rntiType            RntiType,
        tbIndex             INTEGER(0..1),  -- Index for transport blocks when 2 transport blocks are received with the same rnti. Default 0.
        tbSize              INTEGER,        -- Transport block size in bytes
        mcs                 MCS,
        numRBs              INTEGER(0..255)
    }

        -------------------------------------------------------------------------------
        ------      mdmiLte Physical Layer PBCH                            ------------
        -------------------------------------------------------------------------------
-- {ltePhyPbch 1} reserved for PBCH Report
-- {ltePhyPbch 2} reserved for PBCH Stats

-- This log is generated every PBCH Decoding Attempt
pbchDecodingResults OBJECT-TYPE
    SYNTAX  PbchDecodingResults
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PBCH Decoding Results"
::= {ltePhyPbch 3}

    PbchDecodingResults ::= SEQUENCE {
        systemFrameNumber   SystemFrameNumber,
        subFrameNumber      SubFrameNumber,
        servingCellId       INTEGER (0..504),
        pbchDecode          PbchDecode,
        pbchDecodingResult  PbchDecodingResult,
        tx0Rx0Cir           INTEGER
    }

    PbchDecode ::= SEQUENCE {
        earfcn          Earfcn,
        crcResult       CrcResult,
        pbchPayload     INTEGER,            -- raw PBCH payload in bytes, invalid if crcPass is failed
        numAntennas     INTEGER(0..2),      -- 0->1, 1->2, 2->4
        sfn             SystemFrameNumber,  -- system frame number when pbch was decoded
        freqOffset      INTEGER,            -- frequencyOffset estimated based upon the PBCH decode
        dlBandwidth     INTEGER             -- the downlink bandwidth of a cell, in number of resource blocks
    }

    PbchDecodingResult ::= SEQUENCE {
        transmitAntennaConfig   INTEGER (0..2),         -- 0->1, 1->2, 2->4
        sfnOffset               INTEGER (0..7),
        crcResult               CrcResult        
    }

        -------------------------------------------------------------------------------
        ------      mdmiLte Physical Layer PDSCH                           ------------
        -------------------------------------------------------------------------------

-- This log is generated every 1s
pdschReport OBJECT-TYPE
    SYNTAX  PdschReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PDSCH Report"
::= {ltePhyPdsch 1}

    PdschReport ::= SEQUENCE {
        sysFrameNumber          SystemFrameNumber,
        subFrameNumber          SubFrameNumber,
        servingCellIndex        ServingCellIndex,
        resourceBlocks          INTEGER (1..110),
        mimoRankIndicator       INTEGER,           --Number of Transport Blocks the UE can receive per Transmission Time Interval
        pdschDemodulationConfig PdschDemodulationConfig,
        duplicatePacket         INTEGER,           
        harqCombining           HarqCombining,
        pdschStatIndication     PdschStatIndication
    }

    PdschDemodulationConfig ::= SEQUENCE {
        modulationStream0   ModulationScheme,   -- Modulation type
        modulationStream1   ModulationScheme    -- Modulation type
    }

    PdschStatIndication ::= SEQUENCE {
        pmchId              INTEGER (0..255),
        areaId              INTEGER (0..255),
        pdschTb             PdschTransportBlock
    }

    ModulationScheme ::= INTEGER {
        QPSK (0),
        QAM16 (1),
        QAM64 (2),
        QAM256 (3)
    }

    PdschTransportBlock ::= SEQUENCE {
        harqId                  INTEGER(0..14), -- Harq ID 36.213 section 7. Up to 8 for FDD (0-7), up to 15 for TDD (0-14).
        redundancyVersion       INTEGER(0..3),
        newDataIndicator        INTEGER(0..1),                 
        crcResult               CrcResult,
        rntiType                RntiType,
        tbIndex                 INTEGER(0..1),  -- Index for transport blocks when 2 transport blocks are received with the same rnti. Default 0.
        tbSize                  INTEGER,        -- Transport block size in bytes
        mcs                     MCS,
        modulationScheme        ModulationScheme
    }

-- This log is generated every 1s
pdschStatistics OBJECT-TYPE
    SYNTAX  PdschStatistics
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PDSCH Statistics"
::= {ltePhyPdsch 2}

    PdschStatistics ::= SEQUENCE {
        sysFrameNumber              SystemFrameNumber,
        subFrameNumber              SubFrameNumber,
        servingCellIndex            ServingCellIndex,
        pdschStatIndicationStats    PdschStatIndicationStats
    }

    PdschStatIndicationStats ::= SEQUENCE {
        numRBs          INTEGER (1..110),
        numLayers       INTEGER (1..4),
        numTbPresent    INTEGER (0..2)
    }

-- This log is generated every 500 ms
pdschDecodingResults OBJECT-TYPE
    SYNTAX  PdschDecodingResults
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Pdsch Decoding Results"
::= {ltePhyPdsch 3}
    
    PdschDecodingResults ::= SEQUENCE {
        servingCellId               INTEGER (0..504),
        componentCarrierIndex       CarrierType,
        ueCategory                  INTEGER,
        transmissionMode            TransmissionMode,
        decodingResults             SEQUENCE OF PdschDecodingResult
    }

    PdschDecodingResult ::= SEQUENCE {
        sysFrameNumber          SystemFrameNumber,
        subFrameNumber          SubFrameNumber,
        harqId                  INTEGER (0..14),
        systemInfoMsgNum        INTEGER (1..10),
        pdschChannelId          INTEGER,
        systemInfoMask          INTEGER, 
        streams                 SEQUENCE OF PdschDecodingStream
    }

    PdschDecodingStream ::= SEQUENCE {
        transportBlockCrc                   CrcResult,              -- CRC check result of the traspot block during the HARQ process in PDSCH channel
        ndi                                 INTEGER (0..1),
        reTxNumber                          INTEGER (1..8),         -- PDSCH HARQ process retransmition number values from first, …, eighth.
        codeBlockSizePlus                   INTEGER (0..6168),      -- maximum code block size
        codeBlockSizeMinus                  INTEGER (0..6168),
        numCodeBlockPlus                    INTEGER (0..13),
        numCodeBlockMinus                   INTEGER (0..13),
        redundancyVersionIndex              INTEGER,
        turboDecoderMaxIterationNumber      INTEGER,
        harqCombining                       HarqCombining,
        codewordIndex                       INTEGER,
        turboDecoderIterationsNumber        INTEGER,
        codeBlockCrcCheck                   CrcResult,
        earlyTerminationAlgorithm           BOOLEAN
    }

        -------------------------------------------------------------------------------
        ------      mdmiLte Physical Layer PCFICH                          ------------
        -------------------------------------------------------------------------------
-- {ltePhyPcfich 1} reserved for pcfichReport
-- {ltePhyPcfich 2} reserved for pcfichStatistics

-- This log is generated every 30 sub-frames
pcfichDecodingResult OBJECT-TYPE
    SYNTAX  PcfichDecodingResult
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PCFICH Decoding Result"
::= {ltePhyPcfich 3}

    PcfichDecodingResult ::= SEQUENCE {
        sysFrameNumber          SystemFrameNumber,
        subFrameNumber          SubFrameNumber,
        servingCellId           INTEGER (0..504),
        cfi                     INTEGER,
        componentCarrierIndex   CarrierType
    }

        -------------------------------------------------------------------------------
        ------      mdmiLte Physical Layer PDCCH                           ------------
        -------------------------------------------------------------------------------

-- This log is generated every 1s
pdcchReport OBJECT-TYPE
    SYNTAX  PdcchReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PDCCH report"
::= {ltePhyPdcch 1}
    
    PdcchReport ::= SEQUENCE {
        sysFrameNumber          SystemFrameNumber,
        subFrameNumber          SubFrameNumber,
        duplexMode              DuplexType,
        ulDlConfig              INTEGER(0..6),
        aggregationLevel        CecAggregationLevel,
        searchSpace             SearchSpaceType,
        spsGrantType            SpsGrantType,
        indicationReport        SEQUENCE OF PdcchIndicationReport
    }   

    PdcchIndicationReport ::= SEQUENCE {
        servingCellIndex        ServingCellIndex,
        rntiType                RntiType,
        pdcchPayloadSize        INTEGER (0..255),
        newDlTx                 INTEGER (0..1)         -- new DL transmission flag
    }

    SpsGrantType ::= INTEGER {
        Null (0),
        Release (1),
        Activation (2),
        CfgGrant (3),
        ReTx (4)
    }


-- This log is generated every 1s
pdcchStatistics OBJECT-TYPE
    SYNTAX  PdcchStatistics
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PDCCH Statistics"
::= {ltePhyPdcch 2}
    
    PdcchStatistics ::= SEQUENCE {
        sysFrameNumber          SystemFrameNumber,
        subFrameNumber          SubFrameNumber,
        duplexMode              DuplexType,
        ulDlConfig              INTEGER(0..6),
        indicationStats         SEQUENCE OF PdcchIndicationStats
    }   

    PdcchIndicationStats ::= SEQUENCE {
        numDlTbs         INTEGER (0..3)          -- number of DL transport blocks
    }

-- This log is generated every 30 sub-frames
pdcchDecodingResult OBJECT-TYPE
    SYNTAX  PdcchDecodingResult
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PDCCH Decoding Result"
::= {ltePhyPdcch 3}

    PdcchDecodingResult ::= SEQUENCE {
        sysFrameNumber      SystemFrameNumber,
        subFrameNumber      SubFrameNumber,
        servingCellId       INTEGER (0..504),
        hypotheses          Hypotheses
    }

    Hypotheses ::= SEQUENCE OF Hypothesis
    Hypothesis ::= SEQUENCE {
        cecAggregationLevel     CecAggregationLevel,
        dciFormat               DciFormat,
        decodeStatus            RntiType,
        payloadSize             INTEGER,
        dciFormatStatus         DciFormatStatus,
        searchSpaceType         SearchSpaceType,
        startCceIndex           StartCceIndex,
        tailMatch               TailBitingDecoderStateMatch
    }

    DciFormatStatus ::= INTEGER {
        dciSuccess (1),
        dciError (2)
    }

    StartCceIndex ::= INTEGER (0..86)

    TailBitingDecoderStateMatch ::= INTEGER {
        Mismatch (0),
        Match (1)
    }

        -------------------------------------------------------------------------------
        ------      mdmiLte Physical Layer PHICH                           ------------
        -------------------------------------------------------------------------------

-- This log is generated every 1s
phichReport OBJECT-TYPE
    SYNTAX  PhichReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PHICH report"
::= {ltePhyPhich 1}
    
    PhichReport ::= SEQUENCE {
        sysFrameNumber          SystemFrameNumber,
        subFrameNumber          SubFrameNumber,
        duplexMode              DuplexType,
        ulDlConfig              INTEGER(0..6),
        indicationReport        SEQUENCE OF PhichIndicationReport 
    }

    PhichIndicationReport ::= SEQUENCE {
        phichValueIncluded            PhichIncluded,
        phich1ValueIncluded           PhichIncluded
    }

    PhichIncluded ::= CHOICE {
        phichValueNotIncluded        NULL,               
        phichValueIncluded           PhichValue
    }

    PhichValue ::= INTEGER {
        nak(0),
        ack(1)
    }

-- {ltePhyPhich 2} reserved for phichStats

-- This log is generated every 500 ms
phichDecodingResults OBJECT-TYPE
    SYNTAX  PhichDecodingResults
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PHICH decoding results"
::= {ltePhyPhich 3}
    
    PhichDecodingResults ::= SEQUENCE {
        servingCellId               INTEGER (0..504),
        componentCarrierIndex       CarrierType,
        decodingResults             SEQUENCE OF PhichDecodingResult
    }

    PhichDecodingResult ::= SEQUENCE {
        sysFrameNumber          SystemFrameNumber,
        subFrameNumber          SubFrameNumber,
        phichResult0            PhichResultEnabled,         -- FDD and TDD all UL/DL configurations
        phichResult1            PhichResultEnabled          -- For TDD UL/DL configuration0 and PUSCH transmission in SF4 or SF0.
    }

    PhichResultEnabled ::= CHOICE {
        phichResultDisabled        NULL,               
        phichResultEnabled         PhichResult
    }

    PhichResult ::= SEQUENCE {
        decodingResult         PhichDecodingOutcome,
        spreadingCodeIndex     INTEGER (0..7), 
        phichGroupNum          INTEGER (0..31)
    }

    PhichDecodingOutcome ::= INTEGER {
        nak(0),
        ack(1)
    }

        -------------------------------------------------------------------------------
        ------      mdmiLte Physical Layer PUCCH                           ------------
        -------------------------------------------------------------------------------

-- This log is generated every 30 subframes
pucchReport OBJECT-TYPE
    SYNTAX  PucchReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PUCCH Report"
::= {ltePhyPucch 1}
        
    PucchReport ::= SEQUENCE OF PucchReportRecord

    PucchReportRecord ::= SEQUENCE {
        sysFrameNumber              SystemFrameNumber,
        subFrameNumber              SubFrameNumber,
        servingCellId               INTEGER (0..504),
        pucchTxReport               PucchTxReport,
        pucchGeneralTxParameters    PucchGeneralTxParameters
    }

    PucchTxReport ::= SEQUENCE {
        format              DciFormat,
        pucchDigitalGain    INTEGER (0..255),                   -- PUCCH digital amplitude gain in dB
        pucchTxPowerValue   PowerValue,                         -- PUCCH tx power
        pucchTpc            INTEGER (-9..27),                   -- TPC
        gi                  PowerControlAccumalationFactor      -- Power control accumalation factor
    }

    PucchGeneralTxParameters ::= SEQUENCE {
        startRbSlot0        INTEGER (0..110),
        startRbSlot1        INTEGER (0..110),
        dmrsSeqSlot0        INTEGER (0..29),
        dmrsSeqSlot1        INTEGER (0..29)  
    }

-- {ltePhyPucch 2} reserved for pucchStatistics

-- This log is generated every 500 ms
pucchPowerControl OBJECT-TYPE
    SYNTAX  PucchPowerControl
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PUCCH Power Control"
::= {ltePhyPucch 3}

    PucchPowerControl ::= SEQUENCE OF PucchPowerControlRecord
    PucchPowerControlRecord ::= SEQUENCE {
        sysFrameNumber      SystemFrameNumber,
        subFrameNumber      SubFrameNumber,
        pucchTxPowerValue   PowerValue,                         -- PUCCH Tx power measurement in dB
        dciFormat           DciFormat,                          -- DCI format of the decoded PDCCH
        pucchTxFormatType   PucchTxFormatType,                  -- Pucch Tx Format Type            
        numHarqBits         INTEGER (0..2),                     -- Number of Harq bits
        pucchTpc            INTEGER (-9..27),                   -- TPC
        numCqiBits          INTEGER,                            -- Number of CQI bits
        dlPathLoss          INTEGER (0..255),                   -- Downlink path loss calculated in UE
        gi                  PowerControlAccumalationFactor      -- Power control accumalation factor     
    }

    PucchTxFormatType ::= INTEGER {
        format1 (0),
        format1A (1),
        format1B (2),
        format2 (3),
        format2A (4),
        format2B (5)
    }

-- This log is generated every 500 ms
pucchCsf OBJECT-TYPE
    SYNTAX  PucchCsf
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PUCCH CSF"
::= {ltePhyPucch 4}

    PucchCsf ::= SEQUENCE {
        startSysFrameNumber     SystemFrameNumber,
        startSubFrameNumber     SubFrameNumber,
        csfTxMode               TransmissionMode,
        pucchReportingMode      PucchReportingMode,
        pucchReportType         PucchReportType,
        sizeBwp                 INTEGER (0..4),
        bwpIndex                INTEGER (0..4),  
        subBandNum              INTEGER (1..14),
        rankIndex               INTEGER(0..1),  -- 0: Rank 1  1: Rank 2         
        cqiCw0                  CqiSubValue,
        cqiCw1                  CqiSubValue,
        widebandPmi             INTEGER (0..15),
        componentCarrierIndex   CarrierType
    }

    PucchReportingMode ::= INTEGER {
        mode10 (0),
        mode11 (1),
        mode20 (2),
        mode21 (3)
    }

    PucchReportType ::= INTEGER {
        subBandCqiFeedback (0),
        wideBandCqiPmiFeedback (1),
        riFeedback (2),
        widebandCqiFeedback (3)
    }

    CqiSubValue ::= INTEGER (0..15)
        -------------------------------------------------------------------------------
        ------      mdmiLte Physical Layer PUSCH                           ------------
        -------------------------------------------------------------------------------
-- This log is generated every 30 subframes
puschReport OBJECT-TYPE
    SYNTAX  PuschReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PUSCH Report"
::= {ltePhyPusch 1}
        
    PuschReport ::= SEQUENCE OF PuschReportRecord

    PuschReportRecord ::= SEQUENCE {
        sysFrameNumber              SystemFrameNumber,
        subFrameNumber              SubFrameNumber,
        servingCellId               INTEGER (0..504),
        puschTxReport               PuschTxReport,
        puschGeneralTxParameters    PuschGeneralTxParameters
    }

    PuschTxReport ::= SEQUENCE {
        puschDigitalGain    INTEGER (0..255),                   -- PUSCH digital amplitude gain in dB
        puschTxPowerValue   PowerValue,                         -- PUSCH tx power
        puschTpc            INTEGER (-6..8),                    -- PUSCH TPC
        fi                  PowerControlAccumalationFactor,     -- Power control accumalation factor
        tbSize              INTEGER,                            -- Transport block size in bytes
        dlPathLoss          INTEGER (0..255)                    -- Downlink path loss calculated in UE
    }

    PuschGeneralTxParameters ::= SEQUENCE {
        ackExists                   BOOLEAN,
        cqiExists                   BOOLEAN,
        riExists                    BOOLEAN,
        frequencyHopping            FrequencyHopping,             
        startRbSlot0                INTEGER (0..110),
        startRbSlot1                INTEGER (0..110),
        dmrsSeqSlot0                INTEGER (0..11),
        dmrsSeqSlot1                INTEGER (0..11),
        rbNum                       INTEGER (0..110),                 
        tbSize                      INTEGER,
        numAckBits                  INTEGER (0..7),             -- Length of ACK NACK raw payload
        numRiBits                   INTEGER (0..3),             -- Length of RI raw payload  
        numCqiBits                  INTEGER (0..66),            -- Length of CQI raw payload
        modOrder                    PuschModulationOrder,       -- Modulation order    
        retransmitIndex             INTEGER (1..28)             -- HARQ retransmission number   
    }

    FrequencyHopping ::= INTEGER {
        Disabled (0),
        InterSF (1),
        IntraPlusInter (2),
        Undefined (3)
    }

    PuschModulationOrder ::= INTEGER {
        BPSK (0),
        QPSK (1),
        QAM16 (2),
        QAM64 (3)
    }

-- {ltePhyPusch 2} reserved for puschStatistics

-- This log is generated every 500 ms
puschPowerControl OBJECT-TYPE
    SYNTAX  PuschPowerControl
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PUSCH Power Control"
::= {ltePhyPusch 3}

    PuschPowerControl ::= SEQUENCE OF PuschPowerControlRecord
    PuschPowerControlRecord ::= SEQUENCE {
        sysFrameNumber      SystemFrameNumber,
        subFrameNumber      SubFrameNumber,
        puschTxPowerValue   PowerValue,                         -- PUSCH Tx power measurement in dB
        dciFormat           DciFormat,                          -- DCI format of the decoded PDCCH
        puschTxType         PuschTxType,                        -- Pusch Tx Type            
        rbNum               INTEGER (0..110),                   -- Number of allocated resource blocks in PUSCH
        tbSize              INTEGER,                            -- Transport block size in bytes
        dlPathLoss          INTEGER(0..255),                    -- Downlink path loss calculated in UE
        puschTpc            INTEGER (-6..8),                    -- PUSCH TPC
        fi                  PowerControlAccumalationFactor      -- Power control accumalation factor           
    }

    PuschTxType ::= INTEGER {
        semiPersistent (0),
        dynamic (1),
        rachMsg3 (2)
    }


-- This log is generated every 500 ms
puschCsf OBJECT-TYPE
    SYNTAX  PuschCsf
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PUSCH CSF"
::= {ltePhyPusch 4}

    PuschCsf ::= SEQUENCE {
        startSysFrameNumber     SystemFrameNumber,
        startSubFrameNumber     SubFrameNumber,
        csfTxMode               TransmissionMode,
        puschReportingMode      PuschReportingMode,
        subBandNum              INTEGER(1..27),
        rankIndex               INTEGER(0..1),      -- 0: Rank 1  1: Rank 2
        widebandCqiCw0          CqiSubValue,
        widebandCqiCw1          CqiSubValue,
        sizeM                   INTEGER,
        singleWbPmi             INTEGER(0..15),
        singleMbPmi             INTEGER(0..15),
        subbandCqiCw0Sb         CqiSubValue,
        mSubbandCqiCw0          CqiSubValue,
        subbandCqiCw1Sb         CqiSubValue,
        mSubbandCqiCw1          CqiSubValue,
        subBandSizeK            INTEGER,
        componentCarrierIndex   CarrierType
    }

    PuschReportingMode ::= INTEGER {
        modeAperiodicRm12 (0),
        modeAperiodicRm20 (1),
        modeAperiodicRm22 (2),
        modeAperiodicRm30 (3),
        modeAperiodicRm31 (4)
    }

        -------------------------------------------------------------------------------
        ------      mdmiLte Physical Layer PRACH                           ------------
        -------------------------------------------------------------------------------

-- This log is generated every RA Attampt
prachReport OBJECT-TYPE
    SYNTAX  PrachReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "PRACH report"
::= {ltePhyPrach 1}

    PrachReport ::= SEQUENCE {
        sysFrameNumber          SystemFrameNumber,
        subFrameNumber          SubFrameNumber,
        rachTxPower             INTEGER (-112..23),     -- PRACH tx power in dB 
        zadOffSeqNum            INTEGER (0..837),       -- ZadOFF Sequence Number
        prachConfig             INTEGER (0..64),        -- Random access preamble timing for a range of preamble formats
        preambleFormat          INTEGER (0..4),         -- Preamble Format
        duplexType              DuplexType,
        maxTransmissionMsg3     INTEGER (1..8),         -- Max number of HARQ re-transmissions from UE for RACH message 3
        raResponseWindowSize    INTEGER (2..10),        -- Window size for reception of RACH message 2
        rachRequestResult       RachRequestResult       -- RACH Request success for failure
    }

    RachRequestResult ::= INTEGER {
        success (0),
        failure (1)
    }

        -------------------------------------------------------------------------------
        ------      mdmiLte Physical Layer EPDCCH                          ------------
        -------------------------------------------------------------------------------


    -------------------------------------------------------------------------------
    ------      mdmiLte IP                                             ------------
    -------------------------------------------------------------------------------
        -------------------------------------------------------------------------------
        ------      mdmiLte IP KPIs                                        ------------
        -------------------------------------------------------------------------------

ipThroughputDL OBJECT-TYPE
-- Downlink throughput measured by the UE during an ftp-download session, on the IP sub-layer
-- IP packet payload defined by RFC 791 and RFC 2460
    SYNTAX  ThroughputObject
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Downlink throughput measured by the UE on the IP sub-layer. Object is time-stamped and geo-referenced."
::= {lteIpKpis 1}

ipThroughputUL OBJECT-TYPE
-- Uplink throughput measured by the UE during an ftp-download session, on the IP sub-layer
-- IP packet payload defined by RFC 791 and RFC 2460
    SYNTAX  ThroughputObject
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Uplink throughput measured by the UE on the IP sub-layer. Object is time-stamped and geo-referenced."
::= {lteIpKpis 2}

-------------------------------------------------------------------------------
        ------      mdmiLte IP Events                                      ------------
        -------------------------------------------------------------------------------
    
-- This event will be logged every time when a LTE to WiFi handover attempt or response occurs during a call
lteToWifiHandoverEvent OBJECT-TYPE
    SYNTAX  LteWifiHandover
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "LTE to WiFi Handover Event"
::= {lteIpEvents 1}

        -------------------------------------------------------------------------------
        ------      mdmiLte IP Messages                                    ------------
        -------------------------------------------------------------------------------

-- IP Packets, header defined by RFC 791 and RFC 2460
-- Note: IPv6 jumbograms (size > 65536) not supported
-- Default IP Header logging: includes entire IP header only, regardless of embedded stream type (egs UDP/TCP/RTP/SIP)
ip-OTA-Packet OBJECT-TYPE
    SYNTAX  IpPacketReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "IP OTA Packet"
::= {lteIpMessages 1}

    IpPacketReport ::= SEQUENCE {
        ip-version  IpVersion,
        direction   OtaMessageDirection,
        ipPayload   OCTET STRING(SIZE (1..65536)) 
    }
    IpVersion ::= INTEGER {
        ipv4 (1),
        ipv6 (2)
    }

-- SIP Messages from RFC 3261
-- SIP , includes IP header , TCP/UDP header, SIP payload plus options
sip-OTA-Message OBJECT-TYPE
    SYNTAX  SipMessageReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "SIP OTA Message"
::= {lteIpMessages 2}

    SipMessageReport ::= SEQUENCE {
        direction   OtaMessageDirection,
        sipPayload  OCTET STRING(SIZE (1..8192)) 
    }

-- RTP Messages from RFC 3550
-- RTP (only header), includes IP header/TCP/UDP header and the RTP header
rtp-OTA-Message OBJECT-TYPE
    SYNTAX  RtpMessageReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "RTP OTA Message"
::= {lteIpMessages 3}

    RtpMessageReport ::= SEQUENCE {
        direction   OtaMessageDirection,
        rtpPayload  OCTET STRING(SIZE (1..8192)) 
    }

-- IP Packets, header defined by RFC 791 and RFC 2460
-- Note: IPv6 jumbograms (size > 65536) not supported
-- Entire IP header plus payload, only for engg builds
ipOtaPacketWithPayload OBJECT-TYPE
    SYNTAX  IpPacketReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "IP OTA Packet"
::= {lteIpMessages 4}

-- includes IP header , TCP/UDP header, DNS message payload
dns-OTA-Message OBJECT-TYPE
    SYNTAX  DnsMessageReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "DNS Message"
::= {lteIpMessages 5}

    DnsMessageReport ::= SEQUENCE {
        ip-version          IpVersion,
        direction           OtaMessageDirection,
        dnsPayload          OCTET STRING(SIZE (1..65536)) 
    }

-------------------------------------------------------------------------------
------      mdmiGsm                                                ------------
-------------------------------------------------------------------------------
gsmDebug    OBJECT IDENTIFIER ::= { mdmiGsm 1 }
gsmNas      OBJECT IDENTIFIER ::= { mdmiGsm 2 }

gsmNasDebug             OBJECT IDENTIFIER ::= { gsmNas 1 }
gsmNasKpis              OBJECT IDENTIFIER ::= { gsmNas 2 }
gsmNasEvents            OBJECT IDENTIFIER ::= { gsmNas 3 }
gsmNasMessages          OBJECT IDENTIFIER ::= { gsmNas 4 }

    -------------------------------------------------------------------------------
    ------      mdmiGsm Nas                                            ------------
    -------------------------------------------------------------------------------
        -------------------------------------------------------------------------------
        ------      mdmiGsm Nas KPIs                                       ------------
        -------------------------------------------------------------------------------
        -------------------------------------------------------------------------------
        ------      mdmiGsm Nas Events                                     ------------
        -------------------------------------------------------------------------------

gsmMmStateChangeEvent OBJECT-TYPE
    SYNTAX  GsmMmStates
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Current GSM MM State and Substate"
::= {gsmNasEvents 1}

    -- Refer to 3GPP TS 24.008 Section 4.1.2.1 for more details
    GsmMmStates ::= SEQUENCE {
        mmState        MmStateType,
        mmSubstate     MmSubstateType
    }

    MmStateType ::= INTEGER {
        MM-NULL (0),
        MM-LOCATION-UPDATING-INITIATED (3),
        MM-WAIT-FOR-OUTGOING-MM-CONNECTION (5),
        MM-MM-CONNECTION-ACTIVE (6),
        MM-IMSI-DETACH-INITIATED (7),
        MM-PROCESS-CM-SERVICE-PROMPT (8),
        MM-WAIT-FOR-NETWORK-COMMAND (9),
        MM-LOCATION-UPDATE-REJECTED (10),
        MM-WAIT-FOR-RR-CONNECTION-LOCATION-UPDATING (13),
        MM-WAIT-FOR-RR-CONNECTION-MM-CONNECTION (14),
        MM-WAIT-FOR-RR-CONNECTION-IMSI-DETACH (15),
        MM-WAIT-FOR-REESTABLISH (17),
        MM-WAIT-FOR-RR-ACTIVE (18),
        MM-MM-IDLE (19),
        MM-WAIT-FOR-ADDITIONAL-OUTGOING-MM-CONNECTION (20),
        MM-MM-CONNECTION-ACTIVE-GROUP-TRANSMIT-MODE (21),
        MM-WAIT-FOR-RR-CONNECTION-GROUP-TRANSMIT-MODE (22),
        MM-LOCATION-UPDATING-PENDING (23),
        MM-IMSI-DETACH-PENDING (24),
        MM-RR-CONNECTION-RELEASE-NOT-ALLOWED (25)
    }
    
    -- MM sub-states
    MmSubstateType ::= INTEGER(0..11)

    -- If MM state is MM-IDLE(19), MM sub-states
    -- MM-IDLE.NORMAL-SERVICE (1)
    -- MM-IDLE.ATTEMPTING-TO-UPDATE (2)
    -- MM-IDLE.LIMITED-SERVICE (3)
    -- MM-IDLE.NO-IMSI (4)
    -- MM-IDLE.NO-CELL-AVAILABLE (5)
    -- MM-IDLE.LOCATION-UPDATE-NEEDED (6)
    -- MM-IDLE.PLMN-SEARCH (7)
    -- MM-IDLE.PLMN-SEARCH-NORMAL-SERVICE (8)
    -- MM-IDLE.RECEIVING-GROUPCALL-NORMAL-SERVICE (9)
    -- MM-IDLE.RECEIVING-GROUPCALL-LIMITED-SERVICE (10)
    -- MM-IDLE.CALL-INACTIVE (11)

    -- Others use invalid MM Substate value (0)

        -------------------------------------------------------------------------------
        ------      mdmiGsm Nas Messages                                   ------------
        -------------------------------------------------------------------------------

-------------------------------------------------------------------------------
------      mdmiUmts                                               ------------
-------------------------------------------------------------------------------
umtsDebug    OBJECT IDENTIFIER ::= { mdmiUmts 1 }
umtsNas      OBJECT IDENTIFIER ::= { mdmiUmts 2 }

umtsNasDebug             OBJECT IDENTIFIER ::= { umtsNas 1 }
umtsNasKpis              OBJECT IDENTIFIER ::= { umtsNas 2 }
umtsNasEvents            OBJECT IDENTIFIER ::= { umtsNas 3 }
umtsNasMessages          OBJECT IDENTIFIER ::= { umtsNas 4 }

    -------------------------------------------------------------------------------
    ------      mdmiUmts Nas                                            ------------
    -------------------------------------------------------------------------------
        -------------------------------------------------------------------------------
        ------      mdmiUmts Nas KPIs                                      ------------
        -------------------------------------------------------------------------------
        -------------------------------------------------------------------------------
        ------      mdmiUmts Nas Events                                    ------------
        -------------------------------------------------------------------------------

umtsGmmStateChangeEvent OBJECT-TYPE
    SYNTAX  UmtsGmmStates
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Current GMM State and Substate"
::= {umtsNasEvents 1}

    -- Refer to 3GPP TS 24.008 Section 4.1.3.1 for more details
    UmtsGmmStates ::= SEQUENCE {
        gmmState        GmmStateType,
        gmmSubstate     GmmSubstateType
    }

    GmmStateType ::= INTEGER {
        GMM-NULL (1),
        GMM-DEREGISTERED (2),
        GMM-REGISTERED-INITIATED (3),
        GMM-REGISTERED (4),
        GMM-DEREGISTERED-INITIATED (5),
        GMM-ROUTING-AREA-UPDATING-INITIATED (6),
        GMM-SERVICE-REQUEST-INITIATED (7)
    }
    
    -- GMM sub-state
    GmmSubstateType ::= INTEGER(0..9)
    
    -- If GMM state is GMM-DEREGISTERED(2), GMM sub-states
    -- GMM-DEREGISTERED.NORMAL-SERVICE (1)
    -- GMM-DEREGISTERED.LIMITED-SERVICE (2)
    -- GMM-DEREGISTERED.ATTACH-NEEDED (3)
    -- GMM-DEREGISTERED.ATTEMPTING-TO-ATTACH (4)
    -- GMM-DEREGISTERED.NO-IMSI (5)
    -- GMM-DEREGISTERED.NO-CELL-AVAILABLE (6)
    -- GMM-DEREGISTERED.PLMN-SEARCH (7)
    -- GMM-DEREGISTERED.SUSPENDED (8)
    
    
    -- If EMM state is GMM-REGISTERED(4), GMM sub-states
    -- GMM-REGISTERED.NORMAL-SERVICE (1)
    -- GMM-REGISTERED.SUSPENDED (2)
    -- GMM-REGISTERED.UPDATE-NEEDED (3)
    -- GMM-REGISTERED.ATTEMPTING-TO-UPDATE (4)
    -- GMM-REGISTERED.NO-CELL-AVAILABLE (5)
    -- GMM-REGISTERED.LIMITED-SERVICE (6)
    -- GMM-REGISTERED.ATTEMPTING-TO-UPDATE-MM (7)
    -- GMM-REGISTERED.IMSI-DETACH-INITIATED (8)
    -- GMM-REGISTERED.PLMN-SEARCH (9)

    -- Others use invalid GMM Substate value (0)

        -------------------------------------------------------------------------------
        ------      mdmiUmts Nas Messages                                  ------------
        -------------------------------------------------------------------------------


-------------------------------------------------------------------------------
------      mdmiWifi                                               ------------
-------------------------------------------------------------------------------
wifiDebug   OBJECT IDENTIFIER ::= { mdmiWifi 1 }
wifiIp      OBJECT IDENTIFIER ::= { mdmiWifi 2 }
wifiMac     OBJECT IDENTIFIER ::= { mdmiWifi 3}

wifiDebugKpis           OBJECT IDENTIFIER ::= { wifiDebug 1 }
wifiDebugEvents         OBJECT IDENTIFIER ::= { wifiDebug 2 }

wifiIpDebug             OBJECT IDENTIFIER ::= { wifiIp 1 }
wifiIpKpis              OBJECT IDENTIFIER ::= { wifiIp 2 }
wifiIpEvents            OBJECT IDENTIFIER ::= { wifiIp 3 }
wifiIpMessages          OBJECT IDENTIFIER ::= { wifiIp 4 }

wifiMacDebug             OBJECT IDENTIFIER ::= { wifiMac 1 }
wifiMacKpis              OBJECT IDENTIFIER ::= { wifiMac 2 }
wifiMacEvents            OBJECT IDENTIFIER ::= { wifiMac 3 }
wifiMacMessages          OBJECT IDENTIFIER ::= { wifiMac 4 }

        -------------------------------------------------------------------------------
        ------      mdmiWifi Debug KPIs                                    ------------
        -------------------------------------------------------------------------------
-- This log will be logged every 1s
wifiInfo OBJECT-TYPE
    SYNTAX  WifiInformation
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "WiFi Info"
::= {wifiDebugKpis 1}

-- This log will be logged every 1s
wifiInternetConnectionStatus OBJECT-TYPE
    SYNTAX  WifiInternetConnectionStatus
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "WiFi Internet Connection Status"
::= {wifiDebugKpis 2}

WifiInternetConnectionStatus ::= CHOICE {
    noWifiInternetConnection  NULL,
    wifiInternetConnected     WifiInternetConnected     
}

WifiInternetConnected ::= SEQUENCE {
    linkSpeed   INTEGER     -- in Mbps
}

        -------------------------------------------------------------------------------
        ------      mdmiWifi Debug Events                                  ------------
        -------------------------------------------------------------------------------
-- This event is reported at the end of "Wifi Scan" procedure. It includes the list of all the Access points scanned during the "Wifi Scan" procedure.
wifiScanEvent OBJECT-TYPE
    SYNTAX  WifiScan
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "WiFi Scan"
::= {wifiDebugEvents 1}

    WifiScan ::= SEQUENCE {
        timeScanStart           TimeStamp,
        timeScanEnd             TimeStamp,
        scannedChannelList      SEQUENCE OF WifiChannel,
        scanType                WifiScanType,
        scannedAccessPoints     SEQUENCE OF WifiAccessPoint
    }

    WifiChannel ::= SEQUENCE {
        wifiFrequency   WifiFrequency,
        channelNumber   INTEGER
    }

    WifiFrequency ::= INTEGER {
        freq-2_4-GHz (1),
        freq-3_6-GHz (2),
        freq-4_9-GHz (3),
        freq-5-GHz (4),
        freq-5_9GHz (5)
    }

    WifiScanType ::= INTEGER {
        passive (1),
        active (2)
    }

    WifiAccessPoint ::= SEQUENCE {
        bssid               OCTET STRING,
        ssid                OCTET STRING,
        operationChannel    WifiChannel,
        supportedRates      SEQUENCE OF INTEGER,  -- in Mbps
        security            WifiSecurityInfo,
        qosCapability       BOOLEAN,
        countryInfo         CountryInfo,
        htCapability        HTCapability
    }

    WifiSecurityInfo ::= INTEGER {
        WEP (1),
        WPA (2),
        WPA2 (3),
        WPA-CCMP (4),
        WPA-TKIP (5),
        WPA2-CCMP (6),
        WPA2-TKIP (7),
        WPA2-Enterprise (8)
    }

    CountryInfo ::= INTEGER {
        US (0),
        others (1)
    }

    -- Refer to the IEEE 802.11 document Section 8.4.2.59 HT Operation element
    HTCapability ::= SEQUENCE {
        channelWidth                STAChannelWidth,
        secondaryChannelOffset      SecondaryChannelOffset
    }

    STAChannelWidth ::= INTEGER {
        ChannelWidth20MHz (0),
        AnyChannelWidth   (1)      -- any channel width in the Supported channel width set
    }

    SecondaryChannelOffset ::= INTEGER {
        SCA (1),
        SCB (3),
        SCN (0)
        -- value 2 is reserved
    }

-- This event is logged when a WiFi Association occurs
wifiAssociationEvent OBJECT-TYPE
    SYNTAX  WiFiAssociationEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "WiFi Association Event"
::= {wifiDebugEvents 2}

WiFiAssociationEvent ::= SEQUENCE {
    bssid   OCTET STRING,           -- MAC Address of the Access Point UE associated with
    ssid    OCTET STRING,           -- SSID of the Access Point UE associated with
    result  WifiResultCode
}

WifiResultCode ::= INTEGER {
    success (0),
    failure (1)
}

-- This event is logged when a WiFi Re-association occurs
wifiReAssociationEvent OBJECT-TYPE
    SYNTAX  WiFiReAssociationEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "WiFi Re-Association Event"
::= {wifiDebugEvents 3}

WiFiReAssociationEvent ::= SEQUENCE {
    bssid   OCTET STRING,           -- MAC Address of the Access Point UE associated with
    ssid    OCTET STRING,           -- SSID of the Access Point UE associated with
    result  WifiResultCode
}

-- This event is logged when a WiFi Disconnection occurs
wifiDisconnectionEvent OBJECT-TYPE
    SYNTAX  WifiDisconnectionEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "WiFi Disconnection Event"
::= {wifiDebugEvents 4}

WifiDisconnectionEvent ::= SEQUENCE {
    bssid       OCTET STRING,           -- MAC Address of the Access Point UE associated with
    ssid        OCTET STRING,           -- SSID of the Access Point UE associated with
    reasonCode  INTEGER (0..66)         -- Refer to IEEE 802.11-8.4.1.7
}

-- This event is logged when a WiFi Authentication occurs
wifiAuthenticationEvent OBJECT-TYPE
    SYNTAX  WiFiAuthenticationEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "WiFi Authentication Event"
::= {wifiDebugEvents 5}

WiFiAuthenticationEvent ::= SEQUENCE {
    bssid   OCTET STRING,           -- MAC Address of the Access Point UE authenticated with
    result  WifiResultCode
}

-- This event is logged when a WiFi De-Authentication occurs
wifiDeAuthenticationEvent OBJECT-TYPE
    SYNTAX  WiFiDeAuthenticationEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "WiFi De-Authentication Event"
::= {wifiDebugEvents 6}

WiFiDeAuthenticationEvent ::= SEQUENCE {
    bssid   OCTET STRING,               -- MAC Address of the Access Point UE authenticated with
    reasonCode  INTEGER (0..66)         -- Refer to IEEE 802.11-8.4.1.7
}

-- This event is logged when WiFi Power Save Mode on/off is triggered
wifiPowerSaveEvent OBJECT-TYPE
    SYNTAX  WifiPowerSaveEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "WiFi Power Save Event"
::= {wifiDebugEvents 7}

WifiPowerSaveEvent ::= INTEGER {
    powerSaveModeOn (0),
    powerSaveModeOff (1)
}

-- This event is logged when a WiFi DHCP failure occurs
wifiDhcpFailureEvent OBJECT-TYPE
    SYNTAX  WifiDhcpFailureEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "WiFi DHCP Failure Event"
::= {wifiDebugEvents 8}

WifiDhcpFailureEvent ::= SEQUENCE {
    failureReason   OCTET STRING(SIZE (0.. 20))
}

-- This event is logged when a WiFi DNS query or query response occurs
wifiDnsQueryEvent OBJECT-TYPE
    SYNTAX  WifiDnsQueryEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "WiFi DNS Query Event"
::= {wifiDebugEvents 9}

WifiDnsQueryEvent ::= CHOICE {
    dnsQuery    NULL,
    dnsResult   WifiResultCode
}

        -------------------------------------------------------------------------------
        ------      mdmiWifi IP Events                                     ------------
        -------------------------------------------------------------------------------

-- This event will be logged every time when a WiFi to LTE handover attempt or response occurs during a call.
wifiToLTEHandoverEvent OBJECT-TYPE
    SYNTAX  LteWifiHandover
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "WiFi to LTE Handover Event"
::= {wifiIpEvents 1}

        -------------------------------------------------------------------------------
        ------      mdmiWifi IP Messages                                   ------------
        -------------------------------------------------------------------------------

-- IP Packets, header defined by RFC 791 and RFC 2460
-- Note: IPv6 jumbograms (size > 65536) not supported
-- Default IP Header logging: includes entire IP header only, regardless of embedded stream type (egs UDP/TCP/RTP/SIP)
wifi-ip-OTA-Packet OBJECT-TYPE
    SYNTAX  IpPacketReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "IP OTA Packet"
::= {wifiIpMessages 1}

-- SIP Messages from RFC 3261
-- SIP , includes IP header , TCP/UDP header, SIP payload plus options
wifi-sip-OTA-Message OBJECT-TYPE
    SYNTAX  SipMessageReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "SIP OTA Message"
::= {wifiIpMessages 2}

-- RTP Messages from RFC 3550
-- RTP (only header), includes IP header/TCP/UDP header and the RTP header
wifi-rtp-OTA-Message OBJECT-TYPE
    SYNTAX  RtpMessageReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "RTP OTA Message"
::= {wifiIpMessages 3}

-- IP Packets, header defined by RFC 791 and RFC 2460
-- Note: IPv6 jumbograms (size > 65536) not supported
-- Entire IP header plus payload, only for engg builds
wifiIpOtaPacketWithPayload OBJECT-TYPE
    SYNTAX  IpPacketReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "IP OTA Packet"
::= {wifiIpMessages 4}

-- includes IP header , TCP/UDP header, unencrypted ISAKMP payload
wifi-ISAKMP-OTA-Message OBJECT-TYPE
    SYNTAX  IsakmpMessageReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "ISAKMP Message"
::= {wifiIpMessages 5}

    IsakmpMessageReport ::= SEQUENCE {
        ip-version      IpVersion,
        direction       OtaMessageDirection,
        isakmpPayload   OCTET STRING(SIZE (1..65536)) 
    }

-- includes IP header , TCP/UDP header, UDPENCAP payload
wifi-UDPENCAP-OTA-Message OBJECT-TYPE
    SYNTAX  UdpencapMessageReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "UDPENCAP Message"
::= {wifiIpMessages 6}

    UdpencapMessageReport ::= SEQUENCE {
        ip-version          IpVersion,
        direction           OtaMessageDirection,
        udpencapPayload     OCTET STRING(SIZE (1..65536)) 
    }

-- includes IP header , TCP/UDP header, DNS message payload
wifi-DNS-OTA-Message OBJECT-TYPE
    SYNTAX  DnsMessageReport
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "DNS Message"
::= {wifiIpMessages 7}


-------------------------------------------------------------------------------
------      mdmiIms                                                ------------
-------------------------------------------------------------------------------
imsDebug    OBJECT IDENTIFIER ::= { mdmiIms 1 }
imsSip      OBJECT IDENTIFIER ::= { mdmiIms 2 }
imsRtp      OBJECT IDENTIFIER ::= { mdmiIms 3 }

imsSipDebug             OBJECT IDENTIFIER ::= { imsSip 1 }
imsSipKpis              OBJECT IDENTIFIER ::= { imsSip 2 }
imsSipEvents            OBJECT IDENTIFIER ::= { imsSip 3 }

imsRtpDebug             OBJECT IDENTIFIER ::= { imsRtp 1 }
imsRtpKpis              OBJECT IDENTIFIER ::= { imsRtp 2 }
imsRtpEvents            OBJECT IDENTIFIER ::= { imsRtp 3 }

    -------------------------------------------------------------------------------
    ------      mdmiIms SIP                                            ------------
    -------------------------------------------------------------------------------
        -------------------------------------------------------------------------------
        ------      mdmiIms SIP KPIs                                       ------------
        -------------------------------------------------------------------------------
        -------------------------------------------------------------------------------
        ------      mdmiIms SIP Events                                     ------------
        -------------------------------------------------------------------------------

-- This log is generated whenever the call is connected or disconnected
volteCallEvent OBJECT-TYPE
    SYNTAX  VolteCallEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "VoLTE cal event"
::= {imsSipEvents 1}

    VolteCallEvent ::= SEQUENCE {
        callStatus      CallStatus,
        callType        CallType
    }

    -------------------------------------------------------------------------------
    ------      mdmiIms RTP                                            ------------
    -------------------------------------------------------------------------------
        -------------------------------------------------------------------------------
        ------      mdmiIms RTP KPIs                                       ------------
        -------------------------------------------------------------------------------

-- This log is generated every time the codec is successfully initialized
rtpCodec OBJECT-TYPE
    SYNTAX  RtpCodecValue
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "RTP Codec"
::= {imsRtpKpis 1}

    RtpCodecValue ::= SEQUENCE {
        ssrc        INTEGER(1..4294967295),  -- id of rtp stream
        codec       RtpCodecType,            -- Codec
        codecRate   INTEGER(1..11)           -- Codec rate
    }

    RtpCodecType ::= INTEGER {
        AMR (1),
        AMR-WB (2)
    }

-- AMC rates
--      kbps-4-75(1),   4.75 kbps
--      kbps-5-15(2),   5.15 kbps
--      kbps-5-9(3),    5.9 kbps
--      kbps-6-9(5),    6.7 kbps
--      kbps-7-4(6),    7.4 kbps
--      kbps-7-95(7),   7.95 kbps
--      kbps-10-2(8),   10.2 kbps
--      kbps-12-2(9),   12.2 kbps
--      silence(10)     Silence frame
-- AMC-WB rates
--      kbps-6-6(1),    6.6 kbps
--      kbps-8-855(2),  8.855 kbps
--      kbps-12-65(3),  12.65 kbps
--      kbps-14-25(5),  14.25 kbps
--      kbps-15-85(6),  15.85 kbps
--      kbps-18-25(7),  18.25 kbps
--      kbps-19-85(8),  19.85 kbps
--      kbps-23-05(9),  23.05 kbps
--      kbps-23-85(10), 23.85 kbps
--      silence(11)     Silence frame

-- This log is generated at the receiving end of RTP flow when newReceivedSequenceNumber - lastReceivedSequenceNumber > 1
rtpPacketLoss OBJECT-TYPE
    SYNTAX  RtpPacketLossValue
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "RTP Packets Lost"
::= {imsRtpKpis 2}

    RtpPacketLossValue ::= SEQUENCE {
        ssrc        INTEGER(1..4294967295),          -- id of RTP stream
        packetsLost INTEGER(1..65535)                -- number of RTP packets lost
    }

rtpOneWayDelay OBJECT-TYPE
    SYNTAX  RtpOneWayDelayValue
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "RTP One Way Delay"
::= {imsRtpKpis 3}

    RtpOneWayDelayValue ::= SEQUENCE {
        ssrc       INTEGER(1..4294967295),   -- id of RTP stream
        delay      INTEGER(1..65535)         -- one way delay in ms
    }

rtpJitter OBJECT-TYPE
    SYNTAX  RtpJitterValue
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "RTP Jitter"
::= {imsRtpKpis 4}

    RtpJitterValue ::= SEQUENCE {
        ssrc       INTEGER(1..4294967295),   -- id of RTP stream
        jitter     INTEGER(1..65535)         -- jitter in ms
    }

-- This log is generated every 20ms, and the sequence number is the one at that 20ms instant 
rtpJitterBufferDelay OBJECT-TYPE
    SYNTAX  RtpJitterBufferDelayValue
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "RTP Jitter Buffer Delay"
::= {imsRtpKpis 5}

    RtpJitterBufferDelayValue ::= SEQUENCE {
        ssrc                INTEGER(1..4294967295),         -- id of RTP stream
        rtpSequenceNumber   INTEGER(0..65536),              -- the sequence number at the 20ms instant 
        jitterBufferDelay   INTEGER(1..65535)               -- jitter buffer delay in ms
    }

        -------------------------------------------------------------------------------
        ------      mdmiIms RTP Events                                     ------------
        -------------------------------------------------------------------------------  

-------------------------------------------------------------------------------
------      mdmiCommands                                           ------------
-------------------------------------------------------------------------------
-- Make a call
make-call OBJECT-TYPE
    SYNTAX  PhoneNumber
    ACCESS  write-only
    STATUS  mandatory
    DESCRIPTION
    "Set this field to make a call."
::= {mdmiCommands 1}

    --Digits of phone number to call
    PhoneNumber ::= SEQUENCE (SIZE (1..15)) OF INTEGER (0..9)


-------------------------------------------------------------------------------
------      mdmiLteMiddleware                                              ------------
-------------------------------------------------------------------------------
lteMWDebug      OBJECT IDENTIFIER ::= { mdmiLteMiddleware 1 }
lteMWeMBMS      OBJECT IDENTIFIER ::= { mdmiLteMiddleware 2 }

lteMWeMBMSDebug         OBJECT IDENTIFIER ::= { lteMWeMBMS 1 }
lteMWeMBMSKpis          OBJECT IDENTIFIER ::= { lteMWeMBMS 2 }
lteMWeMBMSEvents        OBJECT IDENTIFIER ::= { lteMWeMBMS 3 }
lteMWeMBMSFile          OBJECT IDENTIFIER ::= { lteMWeMBMS 4 }

-- This log is generated every 1 second
embmsServiceAnnouncemnet OBJECT-TYPE
    SYNTAX  ServiceAnnouncemnet
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Service Announcemnet"
::= {lteMWeMBMSKpis 1}

    ServiceAnnouncemnet ::= SEQUENCE {
        servingID           OCTET STRING,                   -- Service ID as in service announcement
        frequencyList       SEQUENCE OF Earfcn,             -- The list of frequencies (EARFCN) on which the TMGI to be activated is available
        tmgiList            SEQUENCE OF INTEGER,            -- The list of Active TMGI's for each MBSFN area
        saiList             SEQUENCE OF INTEGER,            -- The list of SAI where the requested TMGI is present
        serviceClassList    SEQUENCE OF ServiceClass,       -- The list of service class
        registeredAppList   SEQUENCE OF AppInstanceID       -- List of registered Applications IDs, should be updated after app deregister or re-register
    }

    ServiceClass ::= OCTET STRING
    AppInstanceID ::= OCTET STRING

-- This log is generated at the start of SDCH reception
embmsSdchReceptionEvent OBJECT-TYPE
    SYNTAX  SDCHReceptionEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "SDCH Reception Event"
::= {lteMWeMBMSEvents 1}

    SDCHReceptionEvent ::= SEQUENCE {
        actualTime      TimeStamp       -- Actual time of starting to receive SDCH
    }

-- This log is generated at the start of eMBMS session
embmsSessionStartEvent OBJECT-TYPE
    SYNTAX  SessionStartEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Session Start Event"
::= {lteMWeMBMSEvents 2}

    SessionStartEvent ::= SEQUENCE {
        actualTime      TimeStamp       -- Actual time of eMBMS session starts
    }

-- This log is generated at the end of eMBMS session
embmsSessionStopEvent OBJECT-TYPE
    SYNTAX  SessionStopEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Session Stop Event"
::= {lteMWeMBMSEvents 3}

    SessionStopEvent ::= SEQUENCE {
        actualTime      TimeStamp       -- Actual time of eMBMS session stops
    }

-- This log is generated when rejoin service timer expires
embmsRejoinServiceTimerExpiredEvent OBJECT-TYPE
    SYNTAX  RejoinServiceTimerExpiredEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Rejoin Service Timer Expired Event"
::= {lteMWeMBMSEvents 4}

    RejoinServiceTimerExpiredEvent ::= SEQUENCE {
        actualTime      TimeStamp       -- Actual time of rejoin service timer expires
    }

-- This log is generated when UE moves out of MBSFM service area
embmsOutServiceAreaEvent OBJECT-TYPE
    SYNTAX  OutServiceAreaEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Out Service Area Event"
::= {lteMWeMBMSEvents 5}

    OutServiceAreaEvent ::= SEQUENCE {
        actualTime      TimeStamp       -- Actual time when moving out of MBSFM service area
    }

-- This log is generated when UE moves into MBSFM service area
embmsInServiceAreaEvent OBJECT-TYPE
    SYNTAX  InServiceAreaEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "In Service Area Event"
::= {lteMWeMBMSEvents 6}

    InServiceAreaEvent ::= SEQUENCE {
        actualTime      TimeStamp       -- Actual time when moving in to MBSFN service area
    }

-- This log is generated when a segment which was in the past an no longer available is requested and arrives to the DASH Client
embmsLateSegmentArrivalEvent OBJECT-TYPE
    SYNTAX  LateSegmentArraivalEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Late Segment Arraival Event"
::= {lteMWeMBMSEvents 7}

    LateSegmentArraivalEvent ::= SEQUENCE {
        lateSegmentArrivalTime      INTEGER       -- Late segment arrival time in millisecond
    }

-- This log is generated when a DASH HTTP error happens
embmsDashHttpErrorEvent OBJECT-TYPE
    SYNTAX  DashHttpErrorEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "DASH HTTP Error Event"
::= {lteMWeMBMSEvents 8}

    DashHttpErrorEvent ::= SEQUENCE {
        httpErrorCode      INTEGER       -- HTTP error code (4xx)
    }

-- This log is generated when a file download succeeded or failed
embmsFileDownloadCompleteEvent OBJECT-TYPE
    SYNTAX  FileDownloadCompleteEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "File Download Complete Event"
::= {lteMWeMBMSEvents 9}

    FileDownloadCompleteEvent ::= SEQUENCE {
        fileName      OCTET STRING,         -- full name with path
        success       BOOLEAN               -- success for failure
    }

-- This log is generated when DASH Client requests a segment which is in the past and no longer available
embmsDashClientLateRequestEvent OBJECT-TYPE
    SYNTAX  DashClientLateRequestEvent
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Dash Client Late Request Event"
::= {lteMWeMBMSEvents 10}

    DashClientLateRequestEvent ::= SEQUENCE {
        timeDifference   INTEGER     -- The time difference between the request time and the last time the requested segment was available. In millisecond 
    }

-- This log is generated every 1 second
embmsServiceInitialization OBJECT-TYPE
    SYNTAX  ServiceInitialization
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Service Initialization"
::= {lteMWeMBMSFile 1}

    ServiceInitialization ::= SEQUENCE {
        bootConfigFileContent   OCTET STRING,                   -- Bootstrap configuration file content
        saFile                  OCTET STRING,                   -- Include the SA file content
        registeredAppList       SEQUENCE OF AppInstanceID       -- List of registered Applications IDs, should be updated after app deregister or re-register
    }

-- This log is generated every 20 ms
embmsServiceQuality OBJECT-TYPE
    SYNTAX  ServiceQuality
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
    "Service Quality"
::= {lteMWeMBMSFile 2}

    ServiceQuality ::= SEQUENCE {
        totalSegments                       INTEGER,            -- Total received segments during each service session
        offsetTimeForFileRepair             INTEGER,            -- The back off window set by network in second
        randomTimePeriodForFileRepair       INTEGER,            -- The random period selected by MMW in second
        offsetTimeforReceptionReport        INTEGER,            -- The back off window set by network in second
        randomTimePeriodForReceptionReport  INTEGER,            -- The random period selected by MMW in second
        streamFECFailureRate                INTEGER(0..100),    -- After FEC failure rate for streaming per minute, represented as a percentage value less than 100
        fileFECFailureRate                  INTEGER(0..100),    -- After FEC failure rate for streaming per file based, represented as a percentage value less than 100
        channelChangeTime                   INTEGER,            -- The time between a command to select a channel to the time of the new video frame displayed. In millisecond
        segmentsLost                        INTEGER             -- Segments lost during each session
    }

END
